- name: Ensure that the role runs from imjournal inputs to the multiple omfwd output with noop configs
  hosts: all
  become: true
  vars:
    __rsyslog_version: "N/A"
    __test_forward_conf_s_f: /etc/rsyslog.d/30-output-forwards-forwards-severity_and_facility.conf
    __test_ca_cert_name: test-ca.crt
    __test_cert_name: test-cert.pem
    __test_key_name: test-key.pem
    __test_ca_cert: /tmp/{{ __test_ca_cert_name }}
    __test_cert: /tmp/{{ __test_cert_name }}
    __test_key: /tmp/{{ __test_key_name }}

  tasks:
    - name: generate test files
      copy:
        dest: "{{ item }}"
        content:
          This is a fake {{ item }}.
      delegate_to: localhost
      loop:
        - "{{ __test_ca_cert }}"
        - "{{ __test_cert }}"
        - "{{ __test_key }}"

    - name: Deploy rsyslog config on the target host
      vars:
        logging_purge_confs: true
        logging_pki: tls
        logging_pki_files:
          - type: ca_cert
            src: "{{ __test_ca_cert }}"
            dest: "/etc/pki/tls/certs/{{ __test_ca_cert_name }}"
          - type: cert
            src: "{{ __test_cert }}"
          - type: key
            src: "{{ __test_key }}"
        logging_outputs:
          - name: forwards-severity_and_facility
            type: forwards
            facility: local1
            severity: info
            protocol: tcp
            target: host.domain
            port: 1514
        logging_inputs:
          - name: basic_input
            type: basics
        logging_flows:
          - name: flows0
            inputs: [basic_input]
            outputs: [forwards-severity_and_facility]
      include_role:
        name: linux-system-roles.logging

    - include: set_rsyslog_variables.yml

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Check rsyslog version
      assert:
        that: __rsyslog_version != "N/A" and __rsyslog_version != "0.0.0"

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_stat.stat.size < 1000

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched >= 6

    # Checking 'error' in stdout from systemctl status is for detecting the case in which rsyslog is running,
    # but some functionality is disabled due to some error, e.g., error: 'tls.cacert' file couldn't be accessed.
    - name: Check rsyslog errors
      command: systemctl status rsyslog
      register: systemctl_result
      failed_when: "'error' in systemctl_result.stdout or systemctl_result.rc != 0"

    - name: Grep severity_and_facility
      command: /bin/grep "\<action.*forwards-severity_and_facility\>" {{ __test_forward_conf_s_f }}
      register: severity_and_facility
      changed_when: false

    - name: Check severity_and_facility
      assert:
        that: severity_and_facility.stdout is match(" *local1\.info action.name=.forwards-severity_and_facility.* Target=.host.domain. Port=.1514. Protocol=.tcp.*")
