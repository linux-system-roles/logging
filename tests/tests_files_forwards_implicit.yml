- name: Ensure that the role runs with parameters from imjournal to two omfwd outputs and implicit omfile output
  hosts: all
  become: true
  vars:
    __test_files_conf: /etc/rsyslog.d/30-output-files-default_files.conf
    __test_forwards_conf: "/etc/rsyslog.d/30-output-forwards-forwards_severity_and_facility.conf"

  tasks:
    - name: deploy config to output into local files
      vars:
        logging_enabled: true
        rsyslog_default: false
        logging_outputs:
          - name: forwards_severity_and_facility
            type: forwards
            facility: local1
            severity: info
            protocol: tcp
            target: host.domain
            port: 1514
          - name: forwards_facility_only
            type: forwards
            facility: local2
            protocol: tcp
            target: host.domain
            port: 2514
        logging_inputs:
          - name: basic_input0
            type: basics
        logging_flows:
          - name: flow0
            inputs: [basic_input0]
            outputs: [default_files, forwards_severity_and_facility, forwards_facility_only]
      include_role:
        name: linux-system-roles.logging

    - include: set_rsyslog_variables.yml

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_line_count.stdout.0 | int <= 7

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched >= 8

    - name: Get the files config stat
      stat:
        path: "{{ __test_files_conf }}"
      register: stat_output_files_system

    - name: Check if the files config exists
      assert:
        that: stat_output_files_system.stat.exists

    - name: Grep output to messages line
      command: /bin/grep ".var.log.messages" {{ __test_files_conf }}
      register: files_conf_messages
      changed_when: false

    - name: Check the filter
      assert:
        that: files_conf_messages.stdout is match(" *\*.info;mail.none;authpriv.none;cron.none.*.var.log.messages")

    - name: Run logger to generate a test log message
      command: /bin/logger -i -p local6.info -t testTag0 testMessage0000
      changed_when: false

    - name: Check the test log message in /var/log/messages
      command: /bin/grep testMessage0000 /var/log/messages
      register: testMessage0000
      changed_when: false

    - name: Check if the test message is in /var/log/messages
      assert:
        that: testMessage0000.stdout | length > 0

    - name: Get the forwarding config stat
      stat:
        path: "{{ __test_forwards_conf }}"
      register: stat_output_forwards_system

    - name: Check if the forwarding config exists
      assert:
        that: stat_output_forwards_system.stat.exists

    - name: Grep severity_and_facility
      command: /bin/grep "\<action.*forwards_severity_and_facility\>" {{ __test_forwards_conf }}
      register: severity_and_facility
      changed_when: false

    - name: Check severity_and_facility
      assert:
        that: severity_and_facility.stdout is match(" *local1\.info action.name=.forwards_severity_and_facility.* Target=.host.domain. Port=.1514. Protocol=.tcp.*")
