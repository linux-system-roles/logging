# Test the configuration, basics input and a forwards output with invalid logging_pki_files
#
# [Configuration]
# basics input (imjournal) -> forwards output (omfile)
# logging_purge_confs: true
# logging_pki_files:
#     private_key_src: "{{ __test_key }}" <-- local key file path to be copied from
#     Note: ca_cert_src/ca_cert is missing.
# inputs: [basic_input]
# outputs: [forwards_severity_and_facility]
#
# [Test scenario]
# 0. Generate fake key/certs files.
# 1. Run logging role uploading the fake key/certs files, which expects to fail with {{ __expected_error }}
#
- name: Error case for setting logging_pki_files - missing cert_src
  hosts: all
  become: true
  vars:
    __test_key_name: test-key.pem
    __test_key: /tmp/{{ __test_key_name }}
    __expected_error: "Error: tls is enabled in forwards_severity_and_facility; you must specify logging_pki_files ca_cert_src and/or ca_cert in the playbook var section."

  tasks:
    - block:
        - name: Generate fake key/certs files
          copy:
            dest: "{{ __test_key }}"
            content:
              This is a fake {{ __test_key_name }}.
          delegate_to: localhost

        - name: Deploy rsyslog config on the target host
          vars:
            logging_pki_files:
              - private_key_src: "{{ __test_key }}"
            logging_outputs:
              - name: forwards_severity_and_facility
                type: forwards
                facility: local1
                severity: info
                target: host.domain
                pki: tls
                tcp_port: 1514
            logging_inputs:
              - name: basic_input
                type: basics
            logging_flows:
              - name: flows0
                inputs: [basic_input]
                outputs: [forwards_severity_and_facility]
          include_role:
            name: linux-system-roles.logging

        - name: unreachable task
          fail:
            msg: UNREACH

      rescue:
        - debug:
            msg: "Caught an expected error - {{ ansible_failed_result }}"
        - name: assert...
          assert:
            that: "'{{ ansible_failed_result.results.0.msg }}' is match('{{ __expected_error }}')"

    - name: default run for cleanup
      vars:
        logging_inputs:
          - name: basic_input
            type: basics
      include_role:
        name: linux-system-roles.logging
