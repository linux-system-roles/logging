# Test the configuration, basics input and a forwards output with invalid logging_pki_files
#
# [Configuration]
# basics input (imjournal) -> forwards output (omfile)
# logging_purge_confs: true
# logging_pki: tls
# logging_pki_files:
#     ca_cert_src: "{{ __test_ca_cert }}" <-- local ca_cert file path to be copied from
#     ca_cert: "/etc/pki/tls/certs/{{ __test_ca_cert_name }}" <-- target destination
#     private_key_src: "{{ __test_key }}" <-- local key file path to be copied from
#     Note: cert_src is missing.
# inputs: [basic_input]
# outputs: [forwards_severity_and_facility]
#
# [Test scenario]
# 0. Generate fake key/certs files.
# 1. Run logging role uploading the fake key/certs files, which expects to fail with {{ __expected_error }}
#
- name: Error case for setting logging_pki_files - missing cert_src
  hosts: all
  become: true
  vars:
    __test_ca_cert_name: test-ca.crt
    __test_key_name: test-key.pem
    __test_ca_cert: /tmp/{{ __test_ca_cert_name }}
    __test_key: /tmp/{{ __test_key_name }}
    __expected_error: "Error: you specified logging_pki other than none or ptcp and logging_pki_authmode other than anon; you must specify all 3 of logging_pki_files ca_cert_src, cert_src, private_key_src, and/or all 3 of ca_cert, cert, private_key in the playbook var section."

  tasks:
    - block:
        - name: Generate fake key/certs files
          copy:
            dest: "{{ item }}"
            content:
              This is a fake {{ item }}.
          delegate_to: localhost
          loop:
            - "{{ __test_ca_cert }}"
            - "{{ __test_key }}"

        - name: Deploy rsyslog config on the target host
          vars:
            logging_pki: tls
            logging_pki_files:
              - ca_cert_src: "{{ __test_ca_cert }}"
                private_key_src: "{{ __test_key }}"
            logging_outputs:
              - name: forwards_severity_and_facility
                type: forwards
                facility: local1
                severity: info
                protocol: tcp
                target: host.domain
                port: 1514
            logging_inputs:
              - name: basic_input
                type: basics
            logging_flows:
              - name: flows0
                inputs: [basic_input]
                outputs: [forwards_severity_and_facility]
          include_role:
            name: linux-system-roles.logging

        - name: unreachable task
          fail:
            msg: UNREACH

      rescue:
        - debug:
            msg: "Caught an expected error - {{ ansible_failed_result.msg }}"
        - name: assert...
          assert:
            that: "'{{ ansible_failed_result.msg }}' is match('{{ __expected_error }}')"

    - name: default run for cleanup
      vars:
        logging_inputs:
          - name: basic_input
            type: basics
      include_role:
        name: linux-system-roles.logging
