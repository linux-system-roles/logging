# Test to ensure the logging role successfully runs with the no given variables.
#
# [Configuration]
# No variables
#
# [Test scenario]
# 0. Run logging role.
#    If no variables are given, the logging role is not executed.
# 1. Check rsyslog.conf file size.
#    If logging role is _not_ executed, the original file size is about 3000 bytes.
#    Thus, assert the size is greater than 2000.
# 2. Check file count in /etc/rsyslog.d.
#    If logging role is _not_ executed, only configuration files only added by
#    other package could exist. That is usually 1 (RHEL8) or 2 (RHEL7).
#    Thus, assert the the count is less than or equal to 2.
# 3. Check systemctl status of rsyslog as well as error or specific message in the output.
#
- name: Ensure that the role runs with default parameters
  hosts: all
  become: true

  tasks:
    - name: default run
      include_role:
        name: linux-system-roles.logging

    - include_tasks: set_rsyslog_variables.yml

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_stat.stat.size > 2000

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched <= 2

    # Checking 'error' in stdout from systemctl status is for detecting the case in which rsyslog is running,
    # but some functionality is disabled due to some error, e.g., error: 'tls.cacert' file couldn't be accessed.
    - name: Check rsyslog errors
      command: systemctl status rsyslog
      register: __result
      failed_when: "'error' in __result.stdout or 'a RainerScript command' in __result.stdout or __result is failed"
