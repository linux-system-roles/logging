# logging_system_log_dir test - test switching the local log output file location
#
# [Configuration]
# basics input (imjournal) -> default files output (omfile)
#                             default means using the default rsyslog conf in roles/rsyslog/template/output_files.j2.
# logging_system_log_dir: '/var/log/rsyslog'
#
# [Test scenario]
# 0. Run logging role.
# 1. Check rsyslog.conf file size.
#    If logging role is executed, the file size is about 100 bytes.
#    If not executed, the default rsyslog.conf size is larger than 3000 bytes.
#    Thus, assert the size is less than 1000.
# 2. Check file count in /etc/rsyslog.d.
#    If logging role is executed, 5 config files are generated.
#    Other package could add rsyslog config files such as 21-cloudinit.conf to
#    /etc/rsyslog.d and the number varies per RHEL version.
#    Thus, assert the the count is greater than or equal to 5.
# 3. Check systemctl status of rsyslog as well as error or specific message in the output.
# 4. To verify the generated filename is correct, check the config file of files output exists.
# 4.1 Check the config file contains the expected filter and the output file as configured.
# 4.2 Run logger command and check the log is in the local output file {{ logging_system_log_dir }}.
#
- name: Ensure that the role runs with parameters to output into local files in a specified path
  hosts: all
  become: true
  vars:
    __test_files_conf: /etc/rsyslog.d/30-output-files-files-output.conf
    logging_system_log_dir: '/var/log/rsyslog'

  tasks:
    - name: deploy config to output into local files
      vars:
        logging_outputs:
          - name: files-output
            type: files
        logging_inputs:
          - name: basic-input
            type: basics
        logging_flows:
          - name: flows0
            inputs: [basic-input]
            outputs: [files-output]
      include_role:
        name: linux-system-roles.logging

    - include_tasks: set_rsyslog_variables.yml

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_stat.stat.size < 1000

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched >= 5

    # Checking 'error' in stdout from systemctl status is for detecting the case in which rsyslog is running,
    # but some functionality is disabled due to some error, e.g., error: 'tls.cacert' file couldn't be accessed.
    - name: Check rsyslog errors
      command: systemctl status rsyslog
      register: __result
      failed_when: "'error' in __result.stdout or 'a RainerScript command' in __result.stdout or __result is failed"

    - name: Check if the files config exists
      stat:
        path: "{{ __test_files_conf }}"
      register: __result
      failed_when: not __result.stat.exists

    - name: Run logger to generate a test log message
      command: /bin/logger -i -p local6.info -t testTag0 testMessage0000
      changed_when: false

    - name: Check the files output config that the path is {{ logging_system_log_dir }}/messages
      command: /bin/grep '\*.info;mail.none;authpriv.none;cron.none.*{{ logging_system_log_dir }}/messages' {{ __test_files_conf }}
      register: __result
      until: __result is success
      retries: 5
      delay: 1
      changed_when: false

    - name: Check the test log message in {{ logging_system_log_dir }}/messages
      command: /bin/grep testMessage0000 {{ logging_system_log_dir }}/messages
      changed_when: false
