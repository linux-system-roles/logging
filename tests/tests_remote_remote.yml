- name: Ensure that the role runs from inputs from the remote rsyslog to the local files outputs.
  hosts: all
  become: true

  tasks:
    - name: deploy config receiving from the remote hosts and writing them to the local files
      vars:
        logging_purge_confs: true
        logging_outputs:
          - name: remote_files_output0
            type: remote_files
            remote_log_path: /var/log/remote/%HOSTNAME%/%PROGRAMNAME:::secpath-replace%.log
            comment: "This is a comment 0."
            severity: info
            exclude:
              - authpriv.none
          - name: remote_files_output1
            type: remote_files
            remote_sub_path: others/%HOSTNAME%/%PROGRAMNAME:::secpath-replace%.log
            facility: authpriv
        logging_inputs:
          - name: remote_udp_input
            type: remote
            udp_port: 514
          - name: remote_tcp_input
            type: remote
            tcp_port: 514
        logging_flows:
          - name: flow_0
            inputs: [remote_udp_input, remote_tcp_input]
            outputs: [remote_files_output0, remote_files_output1]
      include_role:
        name: linux-system-roles.logging

    - include_tasks: set_rsyslog_variables.yml

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_stat.stat.size < 1000

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched >= 7

    # Checking 'error' in stdout from systemctl status is for detecting the case in which rsyslog is running,
    # but some functionality is disabled due to some error, e.g., error: 'tls.cacert' file couldn't be accessed.
    - name: Check rsyslog errors
      command: systemctl status rsyslog
      register: systemctl_result
      failed_when: "'error' in systemctl_result.stdout or systemctl_result.rc != 0"

    - name: Install lsof
      package:
        name: lsof
        state: present

    - name: lsof outputs for rsyslogd
      shell: |
        set -o pipefail
        lsof -i -nP | grep rsyslogd
      register: lsof_output0
      changed_when: false

    - debug:
        msg: "lsof returned {{ lsof_output0.stdout }}"

    - name: Check port 514 is open for TCP
      shell: |
        set -o pipefail
        lsof -i -nP | grep rsyslogd | grep TCP | grep 514
      changed_when: false

    - name: Check port 514 is open for UDP
      shell: |
        set -o pipefail
        lsof -i -nP | grep rsyslogd | grep UDP | grep 514
      changed_when: false
