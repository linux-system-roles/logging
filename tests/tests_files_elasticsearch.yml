---
- name: Ensure that the role runs with parameters from imfile to two elasticsearch outputs
  hosts: all
  become: true
  vars:
    __test_inputfiles_dir: /var/log/inputdirectory
    __test_inputfiles_conf: /etc/rsyslog.d/90-input-files-files_input.conf
    __test_outputfiles_conf: /etc/rsyslog.d/31-output-elasticsearch-elasticsearch_output.conf
    __test_ca_cert: /tmp/es-ca.crt
    __test_cert: /tmp/es-cert.pem
    __test_key: /tmp/es-key.pem
    __test_ca_cert_target: /etc/rsyslog.d/es-ca-target.crt
    __test_cert_target: /etc/rsyslog.d/es-cert-target.pem
    __test_key_target: /etc/rsyslog.d/es-key-target.pem
    __test_el: elasticsearch_output
    __expected_error1: "Error: you specified tls: true; you must specify all 3 of ca_cert, cert, private_key, or all 3 of ca_cert_src, cert_src, private_key_src, or set tls: false in the configuration named elasticsearch_output"
    __expected_error2: "Error: you specified tls: false and also specified one or more cert/key files in the configuration named elasticsearch_output"

  tasks:
    - name: local certs are copied to the target host with the default configuration path.
      copy:
        dest: "{{ item }}"
        content:
          This is a fake {{ item }}.
      delegate_to: localhost
      loop:
        - "{{ __test_ca_cert }}"
        - "{{ __test_cert }}"
        - "{{ __test_key }}"

    # TEST CASE 0
    - name: TEST CASE 0; local certs are copied to the target host with the default configuration path.
      vars:
        logging_outputs:
          - name: "{{ __test_el }}"
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: true
            ca_cert_src: "{{ __test_ca_cert }}"
            cert_src: "{{ __test_cert }}"
            private_key_src: "{{ __test_key }}"
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
        logging_flows:
          - name: flow_0
            inputs: [files_input]
            outputs: "[{{ __test_el }}]"
      include_role:
        name: linux-system-roles.logging

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Ensure config file size and counts
      vars:
        __conf_count: 9
        __conf_size: less
        __conf_files:
          - "{{ __test_inputfiles_conf }}"
          - "{{ __test_outputfiles_conf }}"
        __check_systemctl_status: true
      include_tasks: tasks/check_daemon_config_files.yml

    - name: Check if the output files config exists
      stat:
        path: "{{ __test_outputfiles_conf }}"

    - name: Check if the copied ca cert file exists
      stat:
        path: "/etc/rsyslog.d/{{ __test_ca_cert | basename }}"

    - name: Check if the copied cert file exists
      stat:
        path: "/etc/rsyslog.d/{{ __test_cert | basename }}"

    - name: Check if the copied key file exists
      stat:
        path: "/etc/rsyslog.d/{{ __test_key | basename }}"

    - name: Check key/certs in {{ __test_outputfiles_conf }}
      command: /bin/grep 'tls.{{ item.key }}="\/etc\/rsyslog.d\/{{ item.value | basename }}"' {{ __test_outputfiles_conf }}
      with_dict:
        - cacert: "{{ __test_ca_cert }}"
        - mycert: "{{ __test_cert }}"
        - myprivkey: "{{ __test_key }}"
      changed_when: false

    - name: Check retryfailures in {{ __test_outputfiles_conf }}
      command: /bin/grep 'retryfailures="on"' {{ __test_outputfiles_conf }}
      changed_when: false

    - name: Check retryruleset in {{ __test_outputfiles_conf }}
      command: /bin/grep 'retryruleset="{{ __test_el }}"' {{ __test_outputfiles_conf }}
      changed_when: false

    - name: END TEST CASE 0; Clean up the deployed config
      vars:
        logging_enabled: false
        logging_outputs:
          - name: "{{ __test_el }}"
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: true
            ca_cert_src: "{{ __test_ca_cert }}"
            cert_src: "{{ __test_cert }}"
            private_key_src: "{{ __test_key }}"
            state: absent
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            state: absent
      include_role:
        name: linux-system-roles.logging

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: clean up fake pki files
      file: path="{{ item }}" state=absent
      loop:
        - /etc/rsyslog.d/es-key.pem
        - /etc/rsyslog.d/es-cert.pem
        - /etc/rsyslog.d/es-ca.crt

    # TEST CASE 1
    - name: TEST CASE 1; Elasticsearch config - local certs are copied to the target host with the specified path.
      vars:
        logging_outputs:
          - name: elasticsearch_output
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: false
            ca_cert_src: "{{ __test_ca_cert }}"
            cert_src: "{{ __test_cert }}"
            private_key_src: "{{ __test_key }}"
            ca_cert: "{{ __test_ca_cert_target }}"
            cert: "{{ __test_cert_target }}"
            private_key: "{{ __test_key_target }}"
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
        logging_flows:
          - name: flow_0
            inputs: [files_input]
            outputs: [elasticsearch_output]
      include_role:
        name: linux-system-roles.logging

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Ensure config file size and counts
      vars:
        __conf_count: 9
        __conf_size: less
        __conf_files:
          - "{{ __test_inputfiles_conf }}"
          - "{{ __test_outputfiles_conf }}"
        __check_systemctl_status: true
      include_tasks: tasks/check_daemon_config_files.yml

    - name: Check if the output files config exists
      stat:
        path: "{{ __test_outputfiles_conf }}"

    - name: Check if the copied ca cert file exists
      stat:
        path: "{{ __test_ca_cert_target }}"

    - name: Check if the copied cert file exists
      stat:
        path: "{{ __test_cert_target }}"

    - name: Check if the copied key file exists
      stat:
        path: "{{ __test_key_target }}"

    - name: Check key/certs in {{ __test_outputfiles_conf }}
      command: /bin/grep 'tls.{{ item.key }}="{{ item.value }}"' {{ __test_outputfiles_conf }}
      with_dict:
        - cacert: "{{ __test_ca_cert_target }}"
        - mycert: "{{ __test_cert_target }}"
        - myprivkey: "{{ __test_key_target }}"
      changed_when: false

    - name: END TEST CASE 1; Clean up the deployed config
      vars:
        logging_enabled: false
        logging_outputs:
          - name: elasticsearch_output
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: false
            ca_cert_src: "{{ __test_ca_cert }}"
            cert_src: "{{ __test_cert }}"
            private_key_src: "{{ __test_key }}"
            ca_cert: "{{ __test_ca_cert_target }}"
            cert: "{{ __test_cert_target }}"
            private_key: "{{ __test_key_target }}"
            state: absent
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            state: absent
      include_role:
        name: linux-system-roles.logging

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: clean up fake pki files
      file: path="{{ item }}" state=absent
      loop:
        - "{{ __test_ca_cert_target }}"
        - "{{ __test_cert_target }}"
        - "{{ __test_key_target }}"

    # TEST CASE 2
    - block:
        - name: TEST CASE 2; Error case for Elasticsearch config - cert and ca_cert_src are missing
          vars:
            logging_outputs:
              - name: elasticsearch_output
                type: elasticsearch
                server_host: logging-es
                server_port: 9200
                index_prefix: project.
                input_type: ovirt
                retryfailures: false
                ca_cert: /etc/rsyslog.d/ca_cert.crt
                private_key: /etc/rsyslog.d/key.pem
                cert_src: "{{ __test_cert }}"
                private_key_src: "{{ __test_key }}"
            logging_inputs:
              - name: files_input
                type: files
                input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            logging_flows:
              - name: flow_0
                inputs: [files_input]
                outputs: [elasticsearch_output, elasticsearch_output_ops]
          include_role:
            name: linux-system-roles.logging

        - name: unreachable task
          fail:
            msg: UNREACH

      rescue:
        - debug:
            msg: "Caught an expected error - {{ ansible_failed_result.results }}"
        - name: assert...
          assert:
            that: "'{{ ansible_failed_result.results.0.msg }}' is match('{{ __expected_error1 }}')"

    - name: END TEST CASE 2; Clean up the deployed config
      vars:
        logging_enabled: false
        logging_outputs:
          - name: elasticsearch_output
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: false
            tls: false
            state: absent
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            state: absent
      include_role:
        name: linux-system-roles.logging

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: clean up fake pki files
      file: path="{{ item }}" state=absent
      loop:
        - /etc/rsyslog.d/es-cert.pem
        - /etc/rsyslog.d/key.pem

    # TEST CASE 3
    - block:
        - name: TEST CASE 3; Error case for Elasticsearch config - although cert paths are specified, tls is false
          vars:
            logging_outputs:
              - name: elasticsearch_output
                type: elasticsearch
                server_host: logging-es
                server_port: 9200
                index_prefix: project.
                input_type: ovirt
                retryfailures: false
                tls: false
                ca_cert: /etc/rsyslog.d/ca_cert.crt
                cert: /etc/rsyslog.d/cert.pem
                private_key: /etc/rsyslog.d/key.pem
                ca_cert_src: "{{ __test_ca_cert }}"
                cert_src: "{{ __test_cert }}"
                private_key_src: "{{ __test_key }}"
            logging_inputs:
              - name: files_input
                type: files
                input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            logging_flows:
              - name: flow_0
                inputs: [files_input]
                outputs: [elasticsearch_output, elasticsearch_output_ops]
          include_role:
            name: linux-system-roles.logging

        - name: unreachable task
          fail:
            msg: UNREACH

      rescue:
        - debug:
            msg: "Caught an expected error - {{ ansible_failed_result.results }}"
        - name: assert...
          assert:
            that: "'{{ ansible_failed_result.results.0.msg }}' is match('{{ __expected_error2 }}')"

    - name: END TEST CASE 3; Clean up the deployed config
      vars:
        logging_enabled: false
        logging_outputs:
          - name: elasticsearch_output
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: false
            tls: true
            ca_cert: /etc/rsyslog.d/ca_cert.crt
            cert: /etc/rsyslog.d/cert.pem
            private_key: /etc/rsyslog.d/key.pem
            ca_cert_src: "{{ __test_ca_cert }}"
            cert_src: "{{ __test_cert }}"
            private_key_src: "{{ __test_key }}"
            state: absent
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            state: absent
      include_role:
        name: linux-system-roles.logging

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: clean up fake pki files
      file: path="{{ item }}" state=absent
      loop:
        - /etc/rsyslog.d/ca_cert.crt
        - /etc/rsyslog.d/cert.pem
        - /etc/rsyslog.d/key.pem

    # TEST CASE 4
    - block:
        - name: TEST CASE 4; Error case for Elasticsearch config - although tls is true, no cert data are given.
          vars:
            logging_outputs:
              - name: elasticsearch_output
                type: elasticsearch
                server_host: logging-es
                server_port: 9200
                index_prefix: project.
                input_type: ovirt
                retryfailures: false
                tls: true
            logging_inputs:
              - name: files_input
                type: files
                input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            logging_flows:
              - name: flow_0
                inputs: [files_input]
                outputs: [elasticsearch_output, elasticsearch_output_ops]
          include_role:
            name: linux-system-roles.logging

        - name: unreachable task
          fail:
            msg: UNREACH

      rescue:
        - debug:
            msg: "Caught an expected error - {{ ansible_failed_result.results }}"
        - name: assert...
          assert:
            that: "'{{ ansible_failed_result.results.0.msg }}' is match('{{ __expected_error1 }}')"

    - name: END TEST CASE 4; Clean up the deployed config
      vars:
        logging_enabled: false
        logging_outputs:
          - name: elasticsearch_output
            type: elasticsearch
            server_host: logging-es
            server_port: 9200
            index_prefix: project.
            input_type: ovirt
            retryfailures: false
            tls: false
            state: absent
        logging_inputs:
          - name: files_input
            type: files
            input_log_path: "{{ __test_inputfiles_dir }}/*.log"
            state: absent
      include_role:
        name: linux-system-roles.logging


    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers
