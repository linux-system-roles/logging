# Test the server configuration containing conflicted tls inputs in the remote input
#
# [Configuration]
# remote inputs - both remote_tcp_0 and remote_tcp_1 configure the tls connection.
#
# [Test scenario]
# 0. Run logging role.
# 1. An exception is to be captured and check the expected error message was returned or not.
#
---
- name: Test the server configuration containing conflicted tls inputs in the remote input
  hosts: all
  vars:
    __test_ca_cert_name: test-ca.crt
    __test_cert_name: test-cert.pem
    __test_key_name: test-key.pem
    __test_ca_cert: /tmp/{{ __test_ca_cert_name }}
    __test_cert: /tmp/{{ __test_cert_name }}
    __test_key: /tmp/{{ __test_key_name }}
    __expected_error: "Error: remote_tcp_0 and remote_tcp_1 conflict."

  tasks:
    - block:
        - name: Generate fake key/certs files
          copy:
            dest: "{{ item }}"
            content:
              This is a fake {{ item }}.
          delegate_to: localhost
          loop:
            - "{{ __test_ca_cert }}"
            - "{{ __test_cert }}"
            - "{{ __test_key }}"

        - name: Deploy rsyslog config on the target host
          vars:
            logging_pki_files:
              - ca_cert_src: "{{ __test_ca_cert }}"
                cert_src: "{{ __test_cert }}"
                private_key_src: "{{ __test_key }}"
            logging_inputs:
              - name: system_input
                type: basics
              - name: remote_tcp_0
                type: remote
                tcp_ports: [6514, 40000, 40001]
                pki: tls
                pki_authmode: x509/name
                permitted_clients:
                  - '*.client.com'
                  - '*.example.com'
              - name: remote_tcp_1
                type: remote
                tcp_ports: [514, 40010, 40011]
                pki: tls
              - name: remote_udp
                type: remote
                udp_ports: [514, 40020]
            logging_outputs:
              - name: files_output
                type: files
            logging_flows:
              - name: flows
                inputs: [system_input, remote_tcp_0, remote_tcp_1, remote_udp]
                outputs: [files_output]
          include_role:
            name: linux-system-roles.logging

        - name: unreachable task
          fail:
            msg: UNREACH

      rescue:
        - debug:
            msg: Caught an expected error - {{ ansible_failed_result }}
        - assert:
            that: item.msg is not defined or item.msg is defined and item.msg == __expected_error
          loop: "{{ ansible_failed_result.results }}"
