- name: Ensure that the role runs with parameters from two imfile inputs to two files outputs
  hosts: all
  become: true
  vars:
    __test_inputfiles_dir0: /var/log/inputdirectory0
    __test_inputfiles_dir1: /var/log/inputdirectory1
    __test_inputfiles_conf0: /etc/rsyslog.d/90-input-files-files_input0.conf
    __test_inputfiles_conf1: /etc/rsyslog.d/90-input-files-files_input1.conf
    __test_outputfiles_conf: /etc/rsyslog.d/30-output-files-files_output0.conf

  tasks:
    - name: deploy config to output into local files
      vars:
        logging_enabled: true
        rsyslog_default: false
        logging_outputs:
          - name: files_output0
            type: files
            severity: info
            exclude: authpriv.none;auth.none;cron.none;mail.none
            path: /var/log/messages
          - name: files_output1
            type: files
            facility: authpriv,auth
            path: /var/log/secure
        logging_inputs:
          - name: files_input0
            type: files
            rsyslog_input_log_path: "{{ __test_inputfiles_dir0 }}/*.log"
          - name: files_input1
            type: files
            rsyslog_input_log_path: "{{ __test_inputfiles_dir1 }}/*.log"
        logging_flows:
          - name: flow_0
            inputs: [files_input0, files_input1]
            outputs: [files_output0, files_output1]
      include_role:
        name: linux-system-roles.logging

    - include: set_rsyslog_variables.yml

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_line_count.stdout.0 | int <= 7

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched >= 7

    - name: Get the output files config stat
      stat:
        path: "{{ __test_outputfiles_conf }}"
      register: stat_output_files_system

    - name: Check if the output files config exists
      assert:
        that: stat_output_files_system.stat.exists

    - name: Grep output to messages line
      command: /bin/grep ".var.log.messages" {{ __test_outputfiles_conf }}
      register: files_conf_messages
      changed_when: false

    - name: Get the files config stat 0
      stat:
        path: "{{ __test_inputfiles_conf0 }}"
      register: stat_input_files_conf0

    - name: Check if the input files config exists 0
      assert:
        that: stat_input_files_conf0.stat.exists

    - name: Get the files config stat 1
      stat:
        path: "{{ __test_inputfiles_conf1 }}"
      register: stat_input_files_conf1

    - name: Check if the input files config exists 1
      assert:
        that: stat_input_files_conf1.stat.exists

    - name: Grep input file 0
      command: /bin/grep 'inputdirectory0' {{ __test_inputfiles_conf0 }}
      register: files_conf_input_file0
      changed_when: false

    - name: Check the filter 0
      assert:
        that: files_conf_input_file0.stdout is match(" *input\(type=\"imfile\" file=\"\/var\/log\/inputdirectory0\/\*\.log\" tag=\"files_input0\"\)")

    - name: Grep input file 1
      command: /bin/grep 'inputdirectory1' {{ __test_inputfiles_conf1 }}
      register: files_conf_input_file1
      changed_when: false

    - name: Check the filter 1
      assert:
        that: files_conf_input_file1.stdout is match(" *input\(type=\"imfile\" file=\"\/var\/log\/inputdirectory1\/\*\.log\" tag=\"files_input1\"\)")
