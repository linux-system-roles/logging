# Test the configuration, basics input and multiple forwards outputs
#
# [Configuration]
# basics input (imjournal) -> 9 forwards output (omfile)
# logging_purge_confs: true
# Note: 3 out of the 9 forwards outputs are skipped since they are missing
#       some mandatory option, name, target or port.
#
# [Test scenario]
# 0. Run logging role.
# 1. Check rsyslog.conf file size.
#    If logging role is executed, the file size is about 100 bytes.
#    If not executed, the default rsyslog.conf size is larger than 3000 bytes.
#    Thus, assert the size is less than 1000.
# 2. Check file count in /etc/rsyslog.d.
#    If logging role is executed, 12 config files are generated.
#    By setting logging_purge_confs, pre-existing config files are deleted.
#    Thus, assert the the count is equal to 12.
# 3. Check systemctl status of rsyslog as well as error or specific message in the output.
# 4. Check 7 forwards output config files so that they contain the configured action.
# 5. Check 2 invalid forwards output config did not generate a config file.
#
- name: Ensure that the role runs from imjournal inputs to the multiple omfwd outputs
  hosts: all
  become: true
  vars:
    __test_forward_conf_s_f: /etc/rsyslog.d/30-output-forwards-forwards_severity_and_facility.conf
    __test_forward_conf_f: /etc/rsyslog.d/30-output-forwards-forwards_facility_only.conf
    __test_forward_conf_s: /etc/rsyslog.d/30-output-forwards-forwards_severity_only.conf
    __test_forward_conf_no: /etc/rsyslog.d/30-output-forwards-forwards_no_severity_and_facility.conf
    __test_forward_conf_no_p: /etc/rsyslog.d/30-output-forwards-forwards_no_severity_and_facility_protocol.conf
    __test_forward_conf_no_udp: /etc/rsyslog.d/30-output-forwards-forwards_no_severity_and_facility_udp.conf
    __test_forward_conf_no_p_p: /etc/rsyslog.d/30-output-forwards-forwards_no_severity_and_facility_protocol_port.conf

  tasks:
    - name: Deploy rsyslog config on the target host
      vars:
        logging_purge_confs: true
        logging_outputs:
          - name: forwards_severity_and_facility
            type: forwards
            facility: local1
            severity: info
            protocol: tcp
            target: host.domain
            port: 1514
          - name: forwards_facility_only
            type: forwards
            facility: local2
            protocol: tcp
            target: host.domain
            port: 2514
          - name: forwards_severity_only
            type: forwards
            severity: err
            protocol: tcp
            target: host.domain
            port: 3514
          - name: forwards_no_severity_and_facility
            type: forwards
            protocol: tcp
            target: host.domain
            port: 4514
          - name: forwards_no_severity_and_facility_protocol
            type: forwards
            target: host.domain
            port: 5514
          - name: forwards_no_severity_and_facility_udp
            type: forwards
            protocol: udp
            target: host.domain
            port: 6514
          - name: forwards_no_severity_and_facility_protocol_port
            type: forwards
            target: host.domain
          - name: forwards_no_severity_and_facility_protocol_port_target
            type: forwards
          - target: no_name.localdomain
            type: forwards
        logging_inputs:
          - name: basic_input
            type: basics
        logging_flows:
          - name: flows0
            inputs: [ basic_input ]
            outputs: [forwards_severity_and_facility, forwards_facility_only,
                      forwards_severity_only, forwards_no_severity_and_facility,
                      forwards_no_severity_and_facility_protocol, forwards_no_severity_and_facility_udp,
                      forwards_no_severity_and_facility_protocol_port,
                      forwards_no_severity_and_facility_protocol_port_target]
      include_role:
        name: linux-system-roles.logging

    - include_tasks: set_rsyslog_variables.yml

    # notify restart rsyslogd is executed at the end of this test task.
    # thus we have to force to invoke handlers
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: Check rsyslog.conf size
      assert:
        that: rsyslog_conf_stat.stat.size < 1000

    - name: Check file counts in rsyslog.d
      assert:
        that: rsyslog_d_file_count.matched == 12

    # Checking 'error' in stdout from systemctl status is for detecting the case in which rsyslog is running,
    # but some functionality is disabled due to some error, e.g., error: 'tls.cacert' file couldn't be accessed.
    - name: Check rsyslog errors
      command: systemctl status rsyslog
      register: __result
      failed_when: "'error' in __result.stdout or 'a RainerScript command' in __result.stdout or __result is failed"

    - name: Check the forwarding config stat
      stat:
        path: "{{ __test_forward_conf_s_f }}"
      register: __result
      failed_when: not __result.stat.exists

    - name: Generated a file to check severity_and_facility
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_severity_and_facility") {
              local1.info action(name="forwards_severity_and_facility"
                  type="omfwd"
                  Target="host.domain"
                  Port="1514"
                  Protocol="tcp"
              )
          }

    - name: Check severity_and_facility
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_s_f }}'
      changed_when: false

    - name: Generated a file to check facility_only
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_facility_only") {
              local2.* action(name="forwards_facility_only"
                  type="omfwd"
                  Target="host.domain"
                  Port="2514"
                  Protocol="tcp"
              )
          }

    - name: Check facility_only
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_f }}'
      changed_when: false

    - name: Generated a file to check severity_only
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_severity_only") {
              *.err action(name="forwards_severity_only"
                  type="omfwd"
                  Target="host.domain"
                  Port="3514"
                  Protocol="tcp"
              )
          }

    - name: Check severity_only
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_s }}'
      changed_when: false

    - name: Generated a file to check no_severity_and_facility
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_no_severity_and_facility") {
              *.* action(name="forwards_no_severity_and_facility"
                  type="omfwd"
                  Target="host.domain"
                  Port="4514"
                  Protocol="tcp"
              )
          }

    - name: Check no_severity_and_facility
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_no }}'
      changed_when: false

    - name: Generated a file to check no_severity_and_facility_protocol
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_no_severity_and_facility_protocol") {
              *.* action(name="forwards_no_severity_and_facility_protocol"
                  type="omfwd"
                  Target="host.domain"
                  Port="5514"
                  Protocol="tcp"
              )
          }

    - name: Check no_severity_and_facility_protocol
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_no_p }}'
      changed_when: false

    - name: Generated a file to check no_severity_and_facility_udp
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_no_severity_and_facility_udp") {
              *.* action(name="forwards_no_severity_and_facility_udp"
                  type="omfwd"
                  Target="host.domain"
                  Port="6514"
                  Protocol="udp"
              )
          }

    - name: Check no_severity_and_facility_udp
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_no_udp }}'
      changed_when: false

    - name: Generated a file to check no_severity_and_facility_protocol_port
      copy:
        dest: /tmp/__testfile__
        content: |
          # Ansible managed
          ruleset(name="forwards_no_severity_and_facility_protocol_port") {
              *.* action(name="forwards_no_severity_and_facility_protocol_port"
                  type="omfwd"
                  Target="host.domain"
                  Port="514"
                  Protocol="tcp"
              )
          }

    - name: Check no_severity_and_facility_protocol_port
      command: diff -B /tmp/__testfile__ '{{ __test_forward_conf_no_p_p }}'
      changed_when: false

    - name: Grep no_severity_and_facility_protocol_port_target
      shell: /bin/grep "\<action.*forwards_no_severity_and_facility_protocol_port_target\>" /etc/rsyslog.d/30-output-forwards*.conf
      register: __result
      changed_when: false
      failed_when: "__result is not failed"

    - name: Grep no_name
      shell: /bin/grep "\<action.*forwards_no_name\.localdomain\>" /etc/rsyslog.d/30-output-forwards*.conf
      register: __result
      changed_when: false
      failed_when: "__result is not failed"
