---
# Set Rsyslog facts

- block:

    - name: Set rsyslog_enabled
      set_fact:
        rsyslog_enabled: "{{ logging_enabled|d(true) }}"

    - name: Set rsyslog_elasticsearch
      set_fact:
        rsyslog_elasticsearch: "{{ rsyslog_elasticsearch|d([]) }} + {{ [  item.0 |combine( {'logs_collections_name': item.1.name} )] }}"
      with_subelements:
        - "{{ logging_outputs }}"
        - logs_collections
      when:
        - item.0.type|d('') == 'elasticsearch'
        - item.1.state|d('present') == 'present'

    - name: Set rsyslog_logs_collections
      set_fact:
        rsyslog_logs_collections: "{{ rsyslog_logs_collections|d([]) }} + {{ [ { 'name': item.1.name, 'state': item.1.state|d('present'), 'output_name': item.0.name } ] }}"
      with_subelements:
        - "{{ logging_outputs }}"
        - logs_collections

    - name: Set rsyslog_outputs
      set_fact:
        rsyslog_outputs: []

    - name: Set rsyslog_outputs
      set_fact:
        rsyslog_outputs: "{{ rsyslog_outputs|d([]) }} + {{ [ item.type ] }}"
      with_items: "{{ logging_outputs }}"
      when: item.type is defined

    - set_fact:
        rsyslog_outputs: "{{ rsyslog_outputs|d([]) | unique }}"

    - name: Check if need to deploy default configuration
      set_fact:
        rsyslog_default_check: "{{ rsyslog_default_check|d([]) }} + {{ [ { 'name': item.1.name } ] }}"
      with_subelements:
        - "{{ logging_outputs }}"
        - logs_collections
      when: item.1.state|d('present') == 'present'

    - name: Set rsyslog_default
      set_fact:
         rsyslog_default: false
      when: (rsyslog_default_check|d([]) != []) or (rsyslog_outputs|d([]) != [])

    - name: Set rsyslog_unprivileged fact
      set_fact:
        rsyslog_unprivileged: "{{ logging_unprivileged|d(false) }}"

    - name: Set rsyslog_purge_original_conf fact to purge all configuration files before saving the new ones.
      set_fact:
        rsyslog_purge_original_conf: yes
      when: logging_purge_confs|d(no)

    - name: Set custom_config_files fact
      set_fact:
        rsyslog_custom_config_files: "{{ item.custom_config_files }}"
      with_items: "{{ logging_outputs }}"
      when:
        - item.type|d('') == 'custom'
        - logging_enabled|d(true)

    - name: Re-read facts after adding custom fact
      setup:
        filter: ansible_local
      when: logging_debug|d(false)

    - name: Create rsyslog debug dir
      file:
        path:  "{{ logging_role_path|d('logging') }}/debug"
        state: 'directory'
        mode: '0700'
      when: logging_debug|d(false)

    - name: Delete debug file
      file:
        path: "{{ logging_role_path|d('logging') }}/debug/main.yaml"
        state: absent
      ignore_errors: true
      when: logging_debug|d(false)

    - name: Create rsyslog debug file
      lineinfile:
        path: "{{ logging_role_path|d('logging') }}/debug/main.yaml"
        create: yes
        line: "#ANSIBLE MANAGED VARIABLES FILE"
      when: logging_debug|d(false)

    - name: Populate rsyslog debug file
      lineinfile:
        path: "{{ logging_role_path|d('logging') }}/debug/main.yaml"
        create: yes
        line: "{{ item.key }}: {{ item.value| to_nice_json(indent=2) }}"
      with_dict: "{{ hostvars[inventory_hostname] }}"
      when:
        - item.key is match("rsyslog*")
        - logging_debug|d(false)

    - name: include Rsyslog role
      include_role:
        name: "{{ logging_role_path|d('logging') }}/roles/rsyslog"

  when: logging_collector|d('rsyslog') == 'rsyslog'
