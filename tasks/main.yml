---
- name: Set Rsyslog facts then include rsyslog role
  block:

    - name: Set rsyslog_output_elasticsearch for the omelasticsearch output
      set_fact:
        rsyslog_output_elasticsearch: "{{ logging_outputs | selectattr('name', 'defined') | selectattr('type', 'defined') |
          selectattr('type', 'match', '^elasticsearch$') | selectattr('server_host', 'defined') | list }}"

    - name: Set rsyslog_output_files for the omfile outputs
      set_fact:
        rsyslog_output_files: "{{ logging_outputs | selectattr('name', 'defined') | selectattr('type', 'defined') |
          selectattr('type', 'match', '^files$') | list }}"

    - name: Set files output if rsyslog_output_files is empty and logging_inputs is not empty
      set_fact:
        rsyslog_output_files: [ {"name": "default_files", "type": "files"} ]
      when:
        - rsyslog_output_files | d([]) | length == 0
        - logging_inputs | d([])

    - name: Set rsyslog_output_forwards for the omfwd output
      set_fact:
        rsyslog_output_forwards: "{{ logging_outputs | selectattr('name', 'defined') | selectattr('type', 'defined') |
          selectattr('target', 'defined') | selectattr('type', 'match', '^forwards$') | list }}"

    - name: Set rsyslog_output_remote_files for the omfwd output for the remote input
      set_fact:
        rsyslog_output_remote_files: "{{ logging_outputs | selectattr('name', 'defined') | selectattr('type', 'defined') |
          selectattr('type', 'match', '^remote_files$') | list }}"

    - name: Set rsyslog_output_relp for the relp output
      set_fact:
        rsyslog_output_relp: "{{ logging_outputs | selectattr('name', 'defined') | selectattr('type', 'defined') |
          selectattr('type', 'match', '^relp$') | selectattr('target', 'defined') | list }}"

    - name: Set rsyslog_input_relp for the relp input
      set_fact:
        rsyslog_input_relp: "{{ logging_inputs | selectattr('name', 'defined') | selectattr('type', 'defined') |
          selectattr('type', 'match', '^relp$') | list }}"

    - name: Set rsyslog_outputs
      set_fact:
        rsyslog_outputs: '{{ rsyslog_output_elasticsearch | d([]) }} + {{ rsyslog_output_files | d([]) }} + {{ rsyslog_output_forwards | d([]) }} + {{ rsyslog_output_remote_files | d([]) }} + {{ rsyslog_output_relp | d([]) }}'

    - name: Set custom_config_files fact
      set_fact:
        rsyslog_custom_config_files: "{{ item.custom_config_files }}"
      with_items: "{{ logging_outputs }}"
      when:
        - item.type | d('') == 'custom'
        - logging_enabled | d(true)

    - block:
        - name: Check logging_inputs item in logging_flows.inputs
          fail:
            msg: "Error: {{ item.inputs }} includes undefined logging_inputs item."
          loop: "{{ logging_flows }}"
          when:
            - logging_enabled | d(true)
            - item.inputs | intersect(__logging_input_names) | length != item.inputs | length
      vars:
        __logging_input_names: "{{ logging_inputs | map(attribute='name') | list }}"

    - block:
        - name: Re-read facts after adding custom fact
          setup:
            filter: ansible_local

        - name: Create rsyslog debug dir
          file:
            path: "{{ role_path }}/debug"
            state: directory
            mode: 0700

        - name: Delete debug file
          file:
            path: "{{ role_path }}/debug/main.yml"
            state: absent
          ignore_errors: true

        - name: Create rsyslog debug file
          lineinfile:
            path: "{{ role_path }}/debug/main.yml"
            create: yes
            line: "#ANSIBLE MANAGED VARIABLES FILE"

        - name: Use a debug var to avoid an empty dict in with_dict
          set_fact:
            __logging_debug_hostname: "{{ hostvars[inventory_hostname] }}"

        - name: Populate rsyslog debug file
          when:
            - __logging_debug_hostname | length > 0
            - item.key is match("rsyslog*")
          lineinfile:
            path: "{{ role_path }}/debug/main.yml"
            create: yes
            line: "{{ item.key }}: {{ item.value | d() | to_nice_json(indent=2) }}"
          with_dict: "{{ __logging_debug_hostname }}"

      when:
        - logging_debug | d(false)

  when: logging_provider == 'rsyslog'

- name: Include Rsyslog role
  vars:
    __rsyslog_enabled: "{{ logging_enabled }}"
    __rsyslog_purge_original_conf: "{{ logging_purge_confs }}"
    __rsyslog_system_log_dir: "{{ logging_system_log_dir }}"
  include_role:
    name: "{{ role_path }}/roles/rsyslog"
  when: logging_provider == 'rsyslog'
