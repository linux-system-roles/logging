---
# General configuration
# ---------------------

# .. envvar:: rsyslog_enabled
#
# Enable or disable ``rsyslog`` management.
rsyslog_enabled: True

# .. envvar:: rsyslog_default
#
# Diploy default ``rsyslog`` configuration file.
rsyslog_default: True

# .. envvar:: rsyslog_system_log_dir
#
# Top directory to place logs
rsyslog_system_log_dir: '/var/log'

# .. envvar:: rsyslog_config_dir
#
# Configuration directory
rsyslog_config_dir: '/etc/rsyslog.d'

# .. envvar:: rsyslog_work_dir
#
# Rsyslog work directory
rsyslog_work_dir: '/var/lib/rsyslog'

# .. envvar:: rsyslog_capabilities
#
# List of different capabilities to configure. See :ref:`rsyslog_capabilities`
# rsyslog_capabilities: [ 'network', 'remote-files', 'tls' ]
rsyslog_capabilities: []

# .. envvar:: rsyslog_unprivileged
#
# Enable or disable unprivileged ``rsyslogd`` operation. Warning, enabling this
# option requires additional configuration outside of the ``rsyslog``
# role. 
rsyslog_unprivileged: '{{ "True"
                           if (ansible_distribution in [ "CentOS", "RedHat", "Fedora" ])
                           else "False" }}'

# .. envvar:: rsyslog_message_reduction
#
# Enable or disable message reduction. This is disabled by default so that log
# parsers like :program:`fail2ban` can work correctly.
rsyslog_message_reduction: False

# .. envvar:: rsyslog_purge_original_conf
#
# The pre-existing config files are archived in the tempdir and purged if the
# rsyslog_purge_original_conf is set to `True`.  Default to 'False`.
rsyslog_purge_original_conf: no

# rpm packages
# adding rsyslog_logging_packages
# ------------------

# .. envvar:: rsyslog_base_packages
#
# List of default rpm packages to install.
rsyslog_base_packages: [ 'rsyslog', 'libselinux-python' ]

# .. envvar:: rsyslog_tls_packages
#
# List of rpm packages required for TLS support.
rsyslog_tls_packages: [ 'rsyslog-gnutls', 'ca-certificates' ]

# .. envvar:: rsyslog_packages
#
# List of additional rpm packages to install.
rsyslog_packages: []

# .. envvar:: rsyslog_custom_config_files
#
# List of additional custom config files.
# Each element: full paths to the files to be deployed.
rsyslog_custom_config_files: []


# User, group, home, file ownership
# ---------------------------------

# .. envvar:: rsyslog_user
#
# The unprivileged system user account used by the ``rsyslogd`` daemon, when
# unprivileged operation is enabled.
rsyslog_user: '{{ "syslog" if rsyslog_unprivileged|bool else "root" }}'

# .. envvar:: rsyslog_group
#
# The unprivileged system group account used by the ``rsyslogd`` daemon, when
# unprivileged operation is enabled.
rsyslog_group: '{{ "syslog" if rsyslog_unprivileged|bool else "root" }}'

# .. envvar:: rsyslog_file_owner
#
# The account which will be set as the owner of the log files generated by
# ``rsyslogd``. When an unprivileged mode is enabled, it should be the same as
# the ``rsyslogd`` user account.
rsyslog_file_owner: '{{ rsyslog_user }}'

# .. envvar:: rsyslog_file_group
#
# The system group which will be set as the default group of the log files
# generated by ``rsyslogd``.
rsyslog_file_group: 'root'

# Encrypted communication
# ------------------------

# .. envvar:: rsyslog_pki
#
# Enable or disable support for X.509 certificates managed by pki_role,
# used for TLS connections.
rsyslog_pki: '{{ True
                  if (ansible_local|d() and ansible_local.pki|d() and
                      ansible_local.pki.enabled|bool)
                  else False }}'

# .. envvar:: rsyslog_pki_path
#
# Path to the directory with PKI realms.
# (??? - do we set the path to some other place???)
rsyslog_pki_path: '{{ ansible_local.pki.path
                       if (ansible_local|d() and ansible_local.pki|d() and
                           ansible_local.pki.path|d())
                       else "/etc/pki" }}'

# .. envvar:: rsyslog_pki_realm
#
# Name of the PKi realm to use with ``rsyslogd``.
rsyslog_pki_realm: '{{ ansible_local.pki.realm
                        if (ansible_local|d() and ansible_local.pki|d() and
                            ansible_local.pki.realm|d())
                        else "domain" }}'

# .. envvar:: rsyslog_pki_ca
#
# Name of the root CA certificate used by the ``rsyslog`` role.
rsyslog_pki_ca: '{{ ansible_local.pki.ca
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.ca|d())
                      else "CA.crt" }}'

# .. envvar:: rsyslog_pki_crt
#
# Name of the client certificate file used by the ``rsyslog`` role.
rsyslog_pki_crt: '{{ ansible_local.pki.crt
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.crt|d())
                      else "default.crt" }}'

# .. envvar:: rsyslog_pki_key
#
# Name of the private key file used by the ``rsyslog`` role.
rsyslog_pki_key: '{{ ansible_local.pki.key
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.key|d())
                      else "default.key" }}'

# .. envvar:: rsyslog_default_netstream_driver
#
# Specify the default netstrap driver used by the ``imtcp`` module. The
# ``gtls`` will be enabled by default if the support for PKI is enabled,
# otherwise ``ptcp`` will be used.
rsyslog_default_netstream_driver: '{{ "gtls"
                                       if (rsyslog_pki|bool and
                                           "tls" in rsyslog_capabilities)
                                       else "ptcp" }}'

# .. envvar:: rsyslog_default_driver_authmode
#
# Specify the default network driver authetication mode. Actualy only
# `x509/name` or `anon` are available:
rsyslog_default_driver_authmode: "x509/name"

# .. envvar:: rsyslog_send_over_tls
#
# This configuration is added to the forward options when ``tls`` capability is
# enabled. It's used to configure TLS options.
rsyslog_send_over_tls: |-
  $ActionSendStreamDriver gtls
  $ActionSendStreamDriverAuthMode {{ rsyslog_default_driver_authmode }}
  {% if rsyslog_default_driver_authmode != "anon" %}
  {%   if rsyslog_send_permitted_peers is string %}
  $ActionSendStreamDriverPermittedPeer {{ rsyslog_send_permitted_peers }}
  {%   else %}
  {%     for peer in rsyslog_send_permitted_peers %}
  $ActionSendStreamDriverPermittedPeer {{ peer }}
  {%     endfor %}
  {%   endif %}
  {% endif %}
  $ActionSendStreamDriverMode 1

# .. envvar:: rsyslog_send_over_tls_only
#
# Specify if you want only TLS communications.
rsyslog_send_over_tls_only: False

# .. envvar:: rsyslog_domain
#
# The default DNS domain used to accept remote incoming logs from remote hosts.
rsyslog_domain: '{{ ansible_domain if ansible_domain else ansible_hostname }}'

# .. envvar:: rsyslog_permitted_peers
#
# List of hostnames, IP addresses or wildcard DNS domains which will be allowed
# by the ``rsyslogd`` server to connect and send logs over TLS.
rsyslog_permitted_peers: [ '*.{{ rsyslog_domain }}' ]

# .. envvar:: rsyslog_send_permitted_peers
#
# List of hostnames, IP addresses or wildcard DNS domains which will be
# verified by the ``rsyslogd`` client and will allow to send logs to the remote
# server over TLS.
rsyslog_send_permitted_peers: '{{ rsyslog_permitted_peers }}'


# Firewall, UDP, TCP ports
# ------------------------

# .. envvar:: rsyslog_udp_port
#
# The incoming UDP port used for remote logging.
rsyslog_udp_port: '514'

# .. envvar:: rsyslog_tcp_port
#
# The incoming TCP port used for remote logging.
rsyslog_tcp_port: '514'

# .. envvar:: rsyslog_tcp_tls_port
#
# The incoming TCP TLS port used for remote logging.
rsyslog_tcp_tls_port: '6514'

# .. envvar:: rsyslog_allow
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# ``rsyslogd`` ports by the firewall. This variable should be used for all
# hosts in the inventory.
rsyslog_allow: []

# .. envvar:: rsyslog_group_allow
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# ``rsyslogd`` ports by the firewall. This variable should be used for specific
# group of hosts in the inventory.
rsyslog_group_allow: []

# .. envvar:: rsyslog_host_allow
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# ``rsyslogd`` ports by the firewall. This variable should be used for specific
# hosts in the inventory.
rsyslog_host_allow: [ '192.168.122.100/24' ]


# Log forwarding
# --------------

# .. envvar:: rsyslog_forward
#
# List of ``rsyslogd`` options that configure log forwarding for all hosts in
# the inventory.
rsyslog_forward: []

# .. envvar:: rsyslog_group_forward
#
# List of ``rsyslogd`` options that configure log forwarding for hosts in
# a specific group.
rsyslog_group_forward: []

# .. envvar:: rsyslog_host_forward
#
# List of ``rsyslogd`` options that configure log forwarding for specific hosts
# in Ansible inventory.
# rsyslog_host_forward: [ '*.* @other.{{ ansible_domain }}' ]
rsyslog_host_forward: []


# Rsyslog configuration rules
# ---------------------------

# .. envvar:: rsyslog_weight_map
#
# This is a dictionary map of different configuration "types" corresponding to
# numbers used to sort configuration files in :file:`{{rsyslog_config_dir}}` directory
# (configuration order is important). You can specify a type in the
# configuration by using the ``item.type`` parameter.
#
# If you change the default weight map values, you will most likely need to
# remove all files from :file:`{{rsyslog_config_dir}}` to reset the configuration.
#
# See :ref:`rsyslog_rules` for more details.
rsyslog_weight_map:
  'global':    '05'
  'globals':   '05'
  'module':    '10'
  'modules':   '10'
  'template':  '20'
  'templates': '20'
  'output':    '30'
  'outputs':   '30'
  'service':   '30'
  'services':  '30'
  'rule':      '50'
  'rules':     '50'
  'ruleset':   '50'
  'rulesets':  '50'
  'input':     '90'
  'inputs':    '90'

# .. envvar:: rsyslog_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This list should be used for configuration of all hosts in the
# inventory.
rsyslog_rules: []

# .. envvar:: rsyslog_group_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This list should be used for configuration of a group of hosts in
# the inventory.
rsyslog_group_rules: []

# .. envvar:: rsyslog_host_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This list should be used for configuration of specific hosts in the
# inventory.
rsyslog_host_rules: []

# .. envvar:: rsyslog_dependent_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This list should be used for configuration by other Ansible roles.
rsyslog_dependent_rules: []

# .. envvar:: rsyslog_.*_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This lis specifies default ``rsyslogd`` configuration enabled in the
# role.
rsyslog_common_rules:

   - '{{ rsyslog_conf_global_options }}'
   - '{{ rsyslog_conf_local_modules }}'
   - '{{ rsyslog_conf_network_modules }}'
   - '{{ rsyslog_conf_common_defaults }}'


# Default configuration options
# -----------------------------

# .. envvar:: rsyslog_conf_global_options
#
# Some of the global ``rsyslogd`` configuration options. See
# http://www.rsyslog.com/doc/v8-stable/rainerscript/global.html for more
# details.
rsyslog_conf_global_options:

  - filename: '00-global.conf'
    comment: 'Global options'
    options: |-
      global(
        defaultNetstreamDriver="{{ rsyslog_default_netstream_driver }}"
        workDirectory="{{ rsyslog_work_dir }}"
      {% if rsyslog_pki|bool and "tls" in rsyslog_capabilities %}
        defaultNetstreamDriverCAFile="{{ rsyslog_pki_path + '/' + rsyslog_pki_realm + '/' + rsyslog_pki_ca }}"
      {%   if rsyslog_default_driver_authmode != "anon" or "network" in rsyslog_capabilities %}
        defaultNetstreamDriverCertFile="{{ rsyslog_pki_path + '/' + rsyslog_pki_realm + '/' + rsyslog_pki_crt }}"
        defaultNetstreamDriverKeyFile="{{ rsyslog_pki_path + '/' + rsyslog_pki_realm + '/' + rsyslog_pki_key }}"
      {%   endif %}
      {% endif %}
      {% if rsyslog_max_message_size is defined %}
        maxMessageSize="{{ rsyslog_max_message_size }}"
      {% endif %}
      )

# .. envvar:: rsyslog_conf_local_modules
#
# List of ``rsyslogd`` modules that enable logs from the local system to be
# received and parsed by the ``rsyslogd`` daemon.
rsyslog_conf_local_modules:

  - name: 'local-modules'
    type: 'modules'
    sections:

      - comment: 'Log kernel messages'
        options: |-
          module(load="imklog" permitnonkernelfacility="on")
        state: '{{ "present"
                  if (ansible_local|d() and ansible_local.cap12s|d() and
                      (not ansible_local.cap12s.enabled|bool or
                       "cap_sys_admin" in ansible_local.cap12s.list))
                  else "absent" }}'

      - comment: 'Log periodic -- MARK -- messages'
        options: |-
          module(load="immark" interval={{ (60 * 60) }})
        state: '{{ "present"
                  if ("mark" in rsyslog_capabilities)
                  else "absent" }}'

# .. envvar:: rsyslog_conf_network_modules
#
# List of ``rsyslogd`` modules that receive logs from remote systems over the
# network. They are enabled by the ``network`` capability.
rsyslog_conf_network_modules:

  - name: 'network-modules'
    type: 'modules'
    state: '{{ "present"
              if ("network" in rsyslog_capabilities)
              else "absent" }}'
    sections:

      - comment: 'Enable UDP support'
        options: |-
          module(load="imudp")
        state: '{{ "present"
                  if (rsyslog_send_over_tls_only)
                  else "absent" }}'

      - comment: 'Enable TCP support'
        options: |-
          module(load="imptcp")
        state: '{{ "present"
                  if (rsyslog_send_over_tls_only)
                  else "absent" }}'

      - comment: 'Enable GnuTLS TCP support'
        options: |-
          module(
            load="imtcp"
            streamDriver.name="gtls"
            streamDriver.mode="1"
            streamDriver.authMode="{{ rsyslog_default_driver_authmode }}"
          {% if rsyslog_default_driver_authmode != "anon" %}
            {% if rsyslog_permitted_peers is string %}
              permittedPeer="{{ rsyslog_permitted_peers }}"
            {% else %}
              permittedPeer=["{{ rsyslog_permitted_peers | join('","') }}"]
            {% endif %}
          {% endif %}
          )
        state: '{{ "present"
                  if ("tls" in rsyslog_capabilities)
                  else "absent" }}'

# .. envvar:: rsyslog_conf_common_defaults
#
# List of common ``rsyslogd`` configuration, like new file owner/group and
# permissions, work directory, configuration of message reduction.
rsyslog_conf_common_defaults:

  - name: 'common-defaults'
    type: 'global'
    sections:

      - comment: 'Set default permissions for all log files'
        options: |-
          $FileOwner {{ rsyslog_file_owner }}
          $FileGroup {{ rsyslog_file_group }}
          $FileCreateMode 0640
          $DirCreateMode 0755
          $Umask 0022
          {% if rsyslog_unprivileged|bool %}
          $PrivDropToUser {{ rsyslog_user }}
          $PrivDropToGroup {{ rsyslog_group }}
          {% endif %}

      - comment: 'Log every message'
        options: |-
          $RepeatedMsgReduction {{ "on" if rsyslog_message_reduction|bool else "off" }}
