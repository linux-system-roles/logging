- name: Install/Update required packages
  package:
    name: "{{ (__rsyslog_base_packages) + (__rsyslog_tls_packages if rsyslog_pki else []) + (rsyslog_extra_packages) }}"
    state: latest
  when:
    - rsyslog_enabled | bool

- name: Gather package facts
  package_facts:
    manager: auto

- name: Get rsyslog version
  set_fact:
    __rsyslog_version: >-
      {{ ansible_facts.packages['rsyslog'][0].version
      if ansible_facts.packages | selectattr('rsyslog', 'defined') | list | length > 0
      else '0.0.0' }}

- debug:
    msg: "Rsyslog_version is {{ __rsyslog_version }}, which is older than \"8.37.0-7.2\"."
  when: __rsyslog_version is version('8.37.0-7.2', '<')

- debug:
    msg: "Rsyslog_version is {{ __rsyslog_version }}, which is newer than \"8.37.0-7.2\"."
  when: __rsyslog_version is version('8.37.0-7.2', '>')

- block:
    - name: Set __rsyslog_failed_validation
      set_fact:
        __rsyslog_failed_validation: true
      when: __rsyslog_version is version('8.37.0-7.2', '<')
  when: use_rsyslog_image | default(false) | bool

- block:
    - name: Create required system group
      group:
        name: '{{ rsyslog_group }}'
        state: present
        system: true
      when:
        - rsyslog_unprivileged | bool
        - rsyslog_group != 'root'

    - name: Create required system user
      user:
        name: '{{ rsyslog_user }}'
        group: '{{ rsyslog_group }}'
        home: '{{ rsyslog_system_log_dir }}'
        shell: '/bin/false'
        state: present
        createhome: false
        system: true
      when:
        - rsyslog_unprivileged | bool
        - rsyslog_user != 'root'

    # Creating a work directory
    - name: Create a work directory
      file:
        state: directory
        path: '{{ rsyslog_work_dir }}'
        owner: '{{ rsyslog_user }}'
        group: '{{ rsyslog_file_group }}'
        mode: 0700
      changed_when: false

    # Creating a backup dir for rsyslog.d
    - name: Set backup dir name
      set_fact:
        rsyslog_backup_dir: '{{ rsyslog_backup_dir | default("/tmp") }}/rsyslog.d-{{ ansible_date_time.iso8601_basic_short }}'

    - name: Create a backup dir
      file:
        state: directory
        path: '{{ rsyslog_backup_dir }}'
        owner: '{{ rsyslog_user }}'
        group: '{{ rsyslog_file_group }}'
        mode: 0755
      changed_when: false

    # Back up the pre-existing rsyslog config files in the backup dir,
    # then removing the files/dirs in rsyslog.d.
    - name: Archive the contents of {{ rsyslog_config_dir }} to the backup dir
      archive:
        path: ["{{ rsyslog_config_dir }}", /etc/rsyslog.conf]
        dest: "{{ rsyslog_backup_dir }}/backup.tgz"
        remove: '{{ true if rsyslog_purge_original_conf | bool else false }}'
      changed_when: false

    - name: Update directory and file permissions
      shell: |
        [ ! -d {{ rsyslog_system_log_dir }} ] ||
        ( [ "$(stat -c '%G' {{ rsyslog_system_log_dir }})" = "{{ rsyslog_group }}" ] ||
        ( chown -v root:{{ rsyslog_group }} {{ rsyslog_system_log_dir }} ;
        chmod -v 775 {{ rsyslog_system_log_dir }} ) )
      register: rsyslog_register_file_permissions
      when: rsyslog_unprivileged | bool
      changed_when: rsyslog_register_file_permissions.stdout

    - name: Generate main rsyslog configuration
      template:
        src: 'etc/rsyslog.conf.j2'
        dest: '/etc/rsyslog.conf'
        owner: '{{ rsyslog_user }}'
        group: '{{ rsyslog_group }}'
        mode: '0400'
      when:
        - rsyslog_enabled | bool
      notify: restart rsyslogd

    - name: Generate common rsyslog configuration files in rsyslog.d
      template:
        src: 'etc/rsyslog.d/rules.conf.j2'
        dest: |-
          {{ rsyslog_config_dir }}/{{ item.filename | d((item.weight if item.weight | d()
          else rsyslog_weight_map[item.type | d("rules")]) + "-" + (item.name | d("rules")) +
          "." + (item.suffix | d("conf"))) }}
        owner: '{{ item.owner | d("root") }}'
        group: '{{ item.group | d("root") }}'
        mode: '{{ item.mode | d("0400") }}'
      loop: '{{ __rsyslog_common_rules | flatten }}'
      when:
        - rsyslog_enabled | bool
        - rsyslog_logs_collections is defined and rsyslog_logs_collections != []
        - item.filename | d() or item.name | d()
        - item.state is undefined or item.state != 'absent'
        - item.options | d() or item.sections | d()
      notify: restart rsyslogd

    - name: Remove common config files in rsyslog.d
      file:
        path: |-
          {{ rsyslog_config_dir }}/{{ item.filename | d((item.weight if item.weight | d() else
          rsyslog_weight_map[item.type | d("rules")]) + "-" + (item.name | d("rules")) + "." +
          (item.suffix | d("conf"))) }}
        state: absent
      loop: '{{ __rsyslog_common_rules | flatten }}'
      when:
        - not rsyslog_enabled | bool
        - rsyslog_logs_collections is not defined or rsyslog_logs_collections == []
        - item.filename | d() or item.name | d()
        - item.options | d() or item.sections | d()
        - item.state is defined and item.state == 'absent'
      notify: restart rsyslogd

    # How to set rsyslog_custom_config_files:
    # rsyslog_custom_config_files: [ '/path/to/custom0.conf', '/path/to/custom1.conf' ]
    # The specified custom config files are copied to /etc/rsyslog.d.
    # If the array containse non-existing file, the deployment stops there with an error.
    - name: Copy custom config files if they are specified in rsyslog_custom_config_files variable array.
      copy:
        src: '{{ item }}'
        dest: '{{ rsyslog_config_dir }}'
        owner: '{{ item.owner | d("root") }}'
        group: '{{ item.group | d("root") }}'
        mode: '{{ item.mode | d("0400") }}'
      loop: '{{ rsyslog_custom_config_files | flatten }}'
      when: (rsyslog_enabled | bool)
      notify: restart rsyslogd

    - name: Run deploy input sub-roles configs
      include_role:
        name: "{{ role_path }}/roles/input_roles/{{ input_item.type }}"
      loop: "{{ rsyslog_logs_collections | flatten(1) }}"
      loop_control:
        loop_var: input_item
      when:
        - rsyslog_enabled | bool
        - input_item is defined and input_item != []
        - input_item.state | d('present') != 'absent'

    - name: Run remove input sub-roles configs
      include_role:
        name: "{{ role_path }}/roles/input_roles/{{ input_item.type }}"
        tasks_from: cleanup.yaml
      loop: "{{ rsyslog_logs_collections | flatten(1) }}"
      loop_control:
        loop_var: input_item
      when:
        - input_item is defined and input_item != []
        - input_item.state | d('present') == 'absent'

    - name: Run output sub-roles configs
      include_role:
        name: "{{ role_path }}/roles/output_roles/{{ output_item }}"
      loop: "{{ rsyslog_outputs | flatten(1) }}"
      loop_control:
        loop_var: output_item
      when:
        - rsyslog_enabled | bool
        - output_item is defined and output_item != []
      tags:
        - skip_ansible_lint

    - name: Enable rsyslog service
      service:
        name: rsyslog
        enabled: yes
        state: started
      when:
        - rsyslog_enabled | bool
        - not rsyslog_in_image | default(false) | bool

    - name: Disable rsyslog service
      systemd:
        name: rsyslog.service
        enabled: no
        state: stopped
      when:
        - not rsyslog_enabled | bool
        - not rsyslog_in_image | default(false) | bool

  when: __rsyslog_failed_validation | d(false) == false

- name: Check rsyslog version
  debug:
    msg: "Rsyslog version must be >= 8.37.0-7.2"
  when:
    - __rsyslog_failed_validation | d(false) == true
    - use_rsyslog_image | default(false) | bool
