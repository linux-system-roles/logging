---
# SPDX-License-Identifier: GPL-3.0-only

- name: Set platform/version specific variables
  include_vars: "{{ item }}"
  loop:
    - "{{ role_path }}/vars/default.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['os_family'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_version'] }}.yml"
  when: item is file

- name: Install/Update required packages
  package:
    name: "{{ __rsyslog_base_packages }} + {{ __rsyslog_tls_packages }} + {{ rsyslog_extra_packages | flatten }}"
    state: latest
  when:
    - __rsyslog_enabled | bool

- name: Gather package facts
  package_facts:
    manager: auto

- name: Get rsyslog version
  set_fact:
    __rsyslog_version: >-
      {{ ansible_facts.packages['rsyslog'][0].version
         if 'rsyslog' in ansible_facts.packages
         else '0.0.0' }}

- debug:
    msg: "Rsyslog_version is {{ __rsyslog_version }}, which is older than \"8.37.0-7.2\"."
  when: __rsyslog_version is version('8.37.0-7.2', '<')

- debug:
    msg: "Rsyslog_version is {{ __rsyslog_version }}, which is newer than \"8.37.0-7.2\"."
  when: __rsyslog_version is version('8.37.0-7.2', '>')

- block:
    - name: Set __rsyslog_failed_validation
      set_fact:
        __rsyslog_failed_validation: true
      when: __rsyslog_version is version('8.37.0-7.2', '<')
  when: rsyslog_in_image | bool

- block:
    - name: Create the config directory if it does not exist
      file:
        state: directory
        path: '{{ __rsyslog_config_dir }}'

    # Creating a work directory
    - name: Create a work directory
      file:
        state: directory
        path: '{{ rsyslog_work_dir }}'

    # Creating a backup dir for rsyslog.d
    - name: Set backup dir name
      set_fact:
        rsyslog_backup_dir: '{{ rsyslog_backup_dir | default("/tmp") }}/rsyslog.d-{{ ansible_date_time.iso8601_basic_short }}'

    - name: Create a backup dir
      file:
        state: directory
        path: '{{ rsyslog_backup_dir }}'
        mode: 0700
      changed_when: false

    # Back up the pre-existing rsyslog config files in the backup dir,
    # then removing the files/dirs in rsyslog.d.
    - name: Archive the contents of {{ __rsyslog_config_dir }} to the backup dir
      archive:
        path: ["{{ __rsyslog_config_dir }}", /etc/rsyslog.conf]
        dest: "{{ rsyslog_backup_dir }}/backup.tgz"
        remove: '{{ true if __rsyslog_purge_original_conf | bool else false }}'
      changed_when: false

    - name: Create logging directory if it does not exist or the ownership and/or modes are different.
      file:
        state: directory
        path: '{{ __rsyslog_system_log_dir }}'
        owner: 'root'
        group: 'root'
        mode: '0700'

    - name: Generate main rsyslog configuration
      template:
        src: 'rsyslog.conf.j2'
        dest: '/etc/rsyslog.conf'
      when:
        - __rsyslog_enabled | bool
        - logging_inputs | d([])
      notify: restart rsyslogd

    - name: Generate global rule to add to __rsyslog_common_rules
      vars:
        __rsyslog_global_rule:
          - filename: '00-global.conf'
            comment: 'Global options'
            options: "{{ lookup('template', 'global.j2') }}"
      set_fact:
        __rsyslog_common_rules: "{{ __rsyslog_global_rule + __rsyslog_common_rules }}"
      when:
        - __rsyslog_enabled | bool

    - name: Generate common rsyslog configuration files in rsyslog.d
      template:
        src: 'rules.conf.j2'
        dest: |-
          {{ __rsyslog_config_dir }}/{{ inner_item.filename | d((inner_item.weight if inner_item.weight | d()
          else rsyslog_weight_map[inner_item.type | d("rules")]) + "-" + (inner_item.name | d("rules")) +
          "." + (inner_item.suffix | d("conf"))) }}
        owner: '{{ inner_item.owner | d("root") }}'
        group: '{{ inner_item.group | d("root") }}'
        mode: '{{ inner_item.mode | d("0644") }}'
      loop: '{{ __rsyslog_common_rules | flatten }}'
      loop_control:
        loop_var: inner_item
      when:
        - __rsyslog_enabled | bool
        - logging_inputs | d([])
        - inner_item.filename | d() or inner_item.name | d()
        - inner_item.state is undefined or inner_item.state != 'absent'
        - inner_item.options | d() or inner_item.sections | d()
      notify: restart rsyslogd

    - name: Remove common config files in rsyslog.d
      file:
        path: |-
          {{ __rsyslog_config_dir }}/{{ inner_item.filename | d((inner_item.weight if inner_item.weight | d() else
          rsyslog_weight_map[inner_item.type | d("rules")]) + "-" + (inner_item.name | d("rules")) + "." +
          (inner_item.suffix | d("conf"))) }}
        state: absent
      loop: '{{ __rsyslog_common_rules | flatten }}'
      loop_control:
        loop_var: inner_item
      when:
        - not __rsyslog_enabled | bool
        - logging_inputs | d([])
        - inner_item.filename | d() or inner_item.name | d()
        - inner_item.options | d() or inner_item.sections | d()
        - inner_item.state is defined and inner_item.state == 'absent'
      notify: restart rsyslogd

    # How to set rsyslog_custom_config_files:
    # rsyslog_custom_config_files: [ '/path/to/custom0.conf', '/path/to/custom1.conf' ]
    # The specified custom config files are copied to /etc/rsyslog.d.
    # If the array contains non-existing file, the deployment stops there with an error.
    - name: Copy custom config files if they are specified in rsyslog_custom_config_files variable array.
      copy:
        src: '{{ item }}'
        dest: '{{ __rsyslog_config_dir }}'
        owner: '{{ item.owner | d("root") }}'
        group: '{{ item.group | d("root") }}'
        mode: '{{ item.mode | d("0644") }}'
      loop: '{{ rsyslog_custom_config_files | flatten }}'
      when: __rsyslog_enabled | bool
      notify: restart rsyslogd

    - block:
        # Check if tls is enabled in forwards output or remote input and
        #          logging_pki_files.{ca_cert_src,ca_cert} is defined
        # Otherwise it fails.
        - name: Check tls is enabled in forwards output or remote input and logging_pki_files
          fail:
            msg: "Error: tls is enabled in {{ item.0.name }}; you must specify logging_pki_files ca_cert_src and/or ca_cert in the playbook var section."
          loop: "{{ [__logging_forwards_tls, __logging_remote_tls] }}"
          when:
            - item | length > 0
            - not (logging_pki_files.0.ca_cert_src | d() or logging_pki_files.0.ca_cert | d())

        - name: Copy local ca_cert file to the target if needed
          vars:
            __pki_file: '{{ logging_pki_files.0.ca_cert_src | basename }}'
          copy:
            src: '{{ logging_pki_files.0.ca_cert_src }}'
            dest: '{{ logging_pki_files.0.ca_cert if logging_pki_files.0.ca_cert is defined else (__rsyslog_default_pki_path + __rsyslog_default_pki_cert_dir + __pki_file) }}'
            mode: "0600"
          when:
            - __logging_forwards_tls | length > 0 or __logging_remote_tls | length > 0
            - logging_pki_files.0.ca_cert_src | d("")
          notify: restart rsyslogd

        - name: Copy local cert file to the target if needed
          vars:
            __pki_file: '{{ logging_pki_files.0.cert_src | basename }}'
          copy:
            src: '{{ logging_pki_files.0.cert_src }}'
            dest: '{{ logging_pki_files.0.cert if logging_pki_files.0.cert is defined else (__rsyslog_default_pki_path + __rsyslog_default_pki_cert_dir + __pki_file) }}'
            mode: "0600"
          when:
            - __logging_forwards_tls | length > 0 or __logging_remote_tls | length > 0
            - logging_pki_files.0.cert_src | d("")
          notify: restart rsyslogd

        - name: Copy local key file to the target if needed
          vars:
            __pki_file: '{{ logging_pki_files.0.private_key_src | basename }}'
          copy:
            src: '{{ logging_pki_files.0.private_key_src }}'
            dest: '{{ logging_pki_files.0.private_key if logging_pki_files.0.private_key is defined else (__rsyslog_default_pki_path + __rsyslog_default_pki_key_dir + __pki_file) }}'
            mode: "0400"
          when:
            - __logging_forwards_tls | length > 0 or __logging_remote_tls | length > 0
            - logging_pki_files.0.private_key_src | d("")
          notify: restart rsyslogd

      vars:
        __logging_forwards_tls: "{{ logging_outputs | selectattr('type', '==', 'forwards') |
                                  selectattr('tls', 'defined') |
                                  selectattr('tls', '==', true) | list }}"
        __logging_remote_tls: "{{ logging_inputs | selectattr('type', '==', 'remote') |
                                  selectattr('tcp_ports', 'defined') |
                                  selectattr('tls', 'defined') |
                                  selectattr('tls', '==', true) | list }}"

      when:
        - __rsyslog_enabled | bool

    - name: Include input sub-vars
      include_vars:
        file: "{{ role_path }}/vars/{{ varfile }}"
      vars:
        varfile: "inputs/{{ input_item.type }}/main.yml"
      loop: "{{ logging_inputs }}"
      loop_control:
        loop_var: input_item
      when:
        - __rsyslog_enabled | bool
        - input_item | d([])

    - name: Run input sub-tasks
      include_tasks:
        file: "{{ tasks }}"
      vars:
        tasks: "{{ role_path }}/tasks/inputs/{{ input_item.type }}/main.yml"
      loop: "{{ logging_inputs }}"
      loop_control:
        loop_var: input_item
      when:
        - __rsyslog_enabled | bool
        - input_item | d([])

    - name: Include output sub-vars
      include_vars:
        file: "{{ role_path }}/vars/{{ varfile }}"
      vars:
        varfile: "outputs/{{ output_item.type }}/main.yml"
      loop: "{{ rsyslog_outputs }}"
      loop_control:
        loop_var: output_item
      when:
        - __rsyslog_enabled | bool
        - output_item | d([])

    - name: Run output sub-tasks
      include_tasks:
        file: "{{ tasks }}"
      vars:
        tasks: "{{ role_path }}/tasks/outputs/{{ output_item.type }}/main.yml"
      loop: "{{ rsyslog_outputs }}"
      loop_control:
        loop_var: output_item
      when:
        - __rsyslog_enabled | bool
        - output_item | d([])

    - name: Enable rsyslog service
      service:
        name: rsyslog
        enabled: yes
        state: started
      when:
        - __rsyslog_enabled | bool
        - not rsyslog_in_image | default(false) | bool

    - name: Disable rsyslog service
      systemd:
        name: rsyslog.service
        enabled: no
        state: stopped
      when:
        - not __rsyslog_enabled | bool
        - not rsyslog_in_image | default(false) | bool

  when: not __rsyslog_failed_validation | d(false)

- name: Check rsyslog version
  debug:
    msg: "Rsyslog version must be >= 8.37.0-7.2"
  when:
    - __rsyslog_failed_validation | d(false)
    - rsyslog_in_image | default(false) | bool
