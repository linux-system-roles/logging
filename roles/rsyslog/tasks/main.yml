- name: Install/Update required packages
  package:
    name: "{{ (__rsyslog_base_packages) + (__rsyslog_tls_packages if rsyslog_pki else []) + (rsyslog_extra_packages | flatten) }}"
    state: latest
  when:
    - rsyslog_enabled | bool

- name: Gather package facts
  package_facts:
    manager: auto

- name: Get rsyslog version
  set_fact:
    __rsyslog_version: >-
      {{ ansible_facts.packages['rsyslog'][0].version
         if 'rsyslog' in ansible_facts.packages
         else '0.0.0' }}

- debug:
    msg: "Rsyslog_version is {{ __rsyslog_version }}, which is older than \"8.37.0-7.2\"."
  when: __rsyslog_version is version('8.37.0-7.2', '<')

- debug:
    msg: "Rsyslog_version is {{ __rsyslog_version }}, which is newer than \"8.37.0-7.2\"."
  when: __rsyslog_version is version('8.37.0-7.2', '>')

- block:
    - name: Set __rsyslog_failed_validation
      set_fact:
        __rsyslog_failed_validation: true
      when: __rsyslog_version is version('8.37.0-7.2', '<')
  when: rsyslog_in_image | bool

- block:
    - name: Create the config directory if it does not exist
      file:
        state: directory
        path: '{{ rsyslog_config_dir }}'

    # Creating a work directory
    - name: Create a work directory
      file:
        state: directory
        path: '{{ rsyslog_work_dir }}'

    # Creating a backup dir for rsyslog.d
    - name: Set backup dir name
      set_fact:
        rsyslog_backup_dir: '{{ rsyslog_backup_dir | default("/tmp") }}/rsyslog.d-{{ ansible_date_time.iso8601_basic_short }}'

    - name: Create a backup dir
      file:
        state: directory
        path: '{{ rsyslog_backup_dir }}'
        mode: 0700
      changed_when: false

    # Back up the pre-existing rsyslog config files in the backup dir,
    # then removing the files/dirs in rsyslog.d.
    - name: Archive the contents of {{ rsyslog_config_dir }} to the backup dir
      archive:
        path: ["{{ rsyslog_config_dir }}", /etc/rsyslog.conf]
        dest: "{{ rsyslog_backup_dir }}/backup.tgz"
        remove: '{{ true if rsyslog_purge_original_conf | bool else false }}'
      changed_when: false

    - name: Create logging directory if it does not exist or the ownership and/or modes are different.
      file:
        state: directory
        path: '{{ rsyslog_system_log_dir }}'
        owner: 'root'
        group: 'root'
        mode: '0700'

    - name: Generate main rsyslog configuration
      template:
        src: 'etc/rsyslog.conf.j2'
        dest: '/etc/rsyslog.conf'
      when:
        - rsyslog_enabled | bool
      notify: restart rsyslogd

    - name: Generate common rsyslog configuration files in rsyslog.d
      template:
        src: 'etc/rsyslog.d/rules.conf.j2'
        dest: |-
          {{ rsyslog_config_dir }}/{{ item.filename | d((item.weight if item.weight | d()
          else rsyslog_weight_map[item.type | d("rules")]) + "-" + (item.name | d("rules")) +
          "." + (item.suffix | d("conf"))) }}
        owner: '{{ item.owner | d("root") }}'
        group: '{{ item.group | d("root") }}'
        mode: '{{ item.mode | d("0644") }}'
      loop: '{{ __rsyslog_common_rules | flatten }}'
      when:
        - rsyslog_enabled | bool
        - logging_inputs | d([])
        - item.filename | d() or item.name | d()
        - item.state is undefined or item.state != 'absent'
        - item.options | d() or item.sections | d()
      notify: restart rsyslogd

    - name: Remove common config files in rsyslog.d
      file:
        path: |-
          {{ rsyslog_config_dir }}/{{ item.filename | d((item.weight if item.weight | d() else
          rsyslog_weight_map[item.type | d("rules")]) + "-" + (item.name | d("rules")) + "." +
          (item.suffix | d("conf"))) }}
        state: absent
      loop: '{{ __rsyslog_common_rules | flatten }}'
      when:
        - not rsyslog_enabled | bool
        - logging_inputs | d([])
        - item.filename | d() or item.name | d()
        - item.options | d() or item.sections | d()
        - item.state is defined and item.state == 'absent'
      notify: restart rsyslogd

    # How to set rsyslog_custom_config_files:
    # rsyslog_custom_config_files: [ '/path/to/custom0.conf', '/path/to/custom1.conf' ]
    # The specified custom config files are copied to /etc/rsyslog.d.
    # If the array containse non-existing file, the deployment stops there with an error.
    - name: Copy custom config files if they are specified in rsyslog_custom_config_files variable array.
      copy:
        src: '{{ item }}'
        dest: '{{ rsyslog_config_dir }}'
        owner: '{{ item.owner | d("root") }}'
        group: '{{ item.group | d("root") }}'
        mode: '{{ item.mode | d("0644") }}'
      loop: '{{ rsyslog_custom_config_files | flatten }}'
      when: (rsyslog_enabled | bool)
      notify: restart rsyslogd

    - name: Run deploy input sub-roles configs
      include_role:
        name: "{{ role_path }}/roles/input_roles/{{ input_item.type }}"
      loop: "{{ logging_inputs | flatten(1) }}"
      loop_control:
        loop_var: input_item
      when:
        - rsyslog_enabled | bool
        - input_item | d([])
        - input_item.state | d('present') != 'absent'

    - name: Run remove input sub-roles configs
      include_role:
        name: "{{ role_path }}/roles/input_roles/{{ input_item.type }}"
        tasks_from: cleanup.yml
      loop: "{{ logging_inputs | flatten(1) }}"
      loop_control:
        loop_var: input_item
      when:
        - input_item | d([])
        - input_item.state | d('present') == 'absent'

    - name: Run output sub-roles configs
      include_role:
        name: "{{ subrole }}"
      vars:
        subrole: "{{ role_path }}/roles/output_roles/{{ output_item.type }}"
      loop: "{{ rsyslog_outputs | flatten(1) }}"
      loop_control:
        loop_var: output_item
      when:
        - rsyslog_enabled | bool
        - output_item | d([])
        - subrole is directory
      tags:
        - skip_ansible_lint

    - name: Include output sub-vars 
      include_vars:
        name: "{{ varfile }}"
      vars:
        varfile: "outputs/{{ output_item.type }}.yml"
        varfile_abspath: "{{ role_path }}/vars/{{ varfile }}.yml"
      loop: "{{ rsyslog_outputs | flatten(1) }}"
      loop_control:
        loop_var: output_item
      when:
        - rsyslog_enabled | bool
        - output_item | d([])
        - varfile_abspath is exists
      tags:
        - skip_ansible_lint

    - name: Run output sub-tasks 
      include_tasks:
        name: "{{ tasks }}"
      vars:
        tasks: "outputs/{{ output_item.type }}.yml"
        tasks_abspath: "{{ role_path }}/tasks/{{ tasks }}"
      loop: "{{ rsyslog_outputs | flatten(1) }}"
      loop_control:
        loop_var: output_item
      when:
        - rsyslog_enabled | bool
        - output_item | d([])
        - tasks_abspath is exists
      tags:
        - skip_ansible_lint

    - name: Enable rsyslog service
      service:
        name: rsyslog
        enabled: yes
        state: started
      when:
        - rsyslog_enabled | bool
        - not rsyslog_in_image | default(false) | bool

    - name: Disable rsyslog service
      systemd:
        name: rsyslog.service
        enabled: no
        state: stopped
      when:
        - not rsyslog_enabled | bool
        - not rsyslog_in_image | default(false) | bool

  when: not __rsyslog_failed_validation | d(false)

- name: Check rsyslog version
  debug:
    msg: "Rsyslog version must be >= 8.37.0-7.2"
  when:
    - __rsyslog_failed_validation | d(false)
    - rsyslog_in_image | default(false) | bool
