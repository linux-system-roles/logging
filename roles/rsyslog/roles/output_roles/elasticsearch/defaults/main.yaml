---
# Elasticsearch configuration
# ---------------------

# .. envvar:: rsyslog_elasticsearch_package
#
# List of rpm packages for Elasticsearch output.
rsyslog_elasticsearch_packages: ['rsyslog-elasticsearch']


# Available configuration set
# ----------------------------

rsyslog_elasticsearch:
  - name: viaq-elasticsearch
    server_host: logging-es
    server_port: 9200
    index_prefix: project.


# Elasticsearch Rsyslog configuration rules
# ---------------------------

rsyslog_elasticsearch_rules:
  - '{{ rsyslog_conf_es_main_modules }}'
  - '{{ rsyslog_conf_es_elasticsearch_templates }}'
  - '{{ rsyslog_conf_es_elasticsearch }}'
  - '{{ rsyslog_conf_es_elasticsearch_call_ruleset }}'

# Default elasticsearch configuration options [[[
# ---------------------------------

rsyslog_conf_es_main_modules:

  - name: 'elasticsearch_main'
    type: 'modules'

    sections:

      - options: |-
          # Send to ElasticSearch
          module(load="omelasticsearch")

rsyslog_conf_es_elasticsearch_templates:

  - name: 'elasticsearch-templates'
    type: 'template'
    path: '{{ rsyslog_file_config_dir }}'
    sections:

      - options: |-
          # omelasticsearch
          template(name="es_template" type="list") {
              property(name="$!all-json-plain")
          }
          template(name="es_template_nl" type="list") {
              property(name="$!all-json-plain")
              constant(value="\n")
          }

          # Add date to the end of the index name - index_prefix.yyyy-mm-dd,
          # based on the log timestamp.
          # This template sets "index_name"
          template(name="prefix_index_template" type="list") {
              property(name="$.index_prefix")
              property(name="$!@timestamp" dateFormat="rfc3339" position.from="1" position.to="4")
              constant(value=".")
              property(name="$!@timestamp" dateFormat="rfc3339" position.from="6" position.to="7")
              constant(value=".")
              property(name="$!@timestamp" dateFormat="rfc3339" position.from="9" position.to="10")
          }

          template(name="index_template" type="string" string="%$.index_name%")
          template(name="id_template" type="string" string="%$.es_msg_id%")

rsyslog_conf_es_elasticsearch:

  - name: '00-elasticsearch'
    type: 'format'
    path: '{{ rsyslog_file_config_dir }}'
    sections:

      - options: |-
          # omelasticsearch
          ruleset(name="error_es") {
          {% if use_rsyslog_image|bool %}
            action(type="omfile" template="es_template_nl" file=`echo $RSYSLOG_BULK_ERRORS`)
          {% else %}
            action(type="omfile" template="es_template_nl" file="{{rsyslog_work_dir}}/es-bulk-errors.log")
          {% endif %}
          }

          ruleset(name="try_es") {
              if strlen($.omes!status) > 0 then {
                  # retry case
                  if ($.omes!status == 200) or ($.omes!status == 201) or (($.omes!status == 409) and ($.omes!writeoperation == "create")) then {
                      stop # successful
                  }
                  if ($.omes!writeoperation == "unknown") or (strlen($.omes!error!type) == 0) or (strlen($.omes!error!reason) == 0) then {
                      call error_es
                      stop
                  }
                  if ($.omes!status == 400) or ($.omes!status < 200) then {
                      call error_es
                      stop
                  }
                  # else fall through to retry operation
              }
              if strlen($!es_msg_id) > 0 then {
                  set $.es_msg_id = $!es_msg_id;
              } else if strlen($.omes!_id) > 0 then {
                  # retry
                  set $.es_msg_id = $.omes!_id;
              } else {
                  # NOTE: depends on rsyslog being compiled with --enable-uuid
                  set $.es_msg_id = $uuid;
              }
              if strlen($.omes!_index) > 0 then {
                  # retry
                  set $.index_name = $.omes!_index;
              } else {
                  set $.index_name = exec_template("prefix_index_template");
              }
          {% for res in rsyslog_elasticsearch %}
          {% if loop.length == 1 %}
              action(
                  type="omelasticsearch"
          {% if use_rsyslog_image|bool %}
                  name=`echo $ES_OUTPUT_NAME`
                  server=`echo $ES_HOST`
                  serverport=`echo $ES_PORT`
          {% else %}
                  name="{{ res.name | default('viaq-elasticsearch') }}"
                  server="{{ res.server_host | default('logging-es') }}"
                  serverport="{{ res.server_port | default(9200) | int }}"
          {% endif %}
                  template="{{ res.template | default("es_template") }}"
                  searchIndex="{{ res.searchIndex | default("index_template") }}"
                  dynSearchIndex="{{ res.dynSearchIndex | default("on") }}"
                  searchType="{{ res.searchType | default("com.redhat.viaq.common") }}"
                  bulkmode="{{ res.bulkmode | default("on") }}"
                  writeoperation="{{ res.writeoperation | default("create") }}"
                  bulkid="{{ res.bulkid | default("id_template") }}"
                  dynbulkid="{{ res.dynbulkid | default("on") }}"
                  retryfailures="{{ res.retryfailures | default("on") }}"
                  allowUnsignedCerts="{{ res.allowUnsignedCerts | default("off") }}"
                  retryruleset="{{ res.retryruleset | default("try_es") }}"
                  usehttps="{{ res.usehttps | default("on") }}"
          {% if use_omelasticsearch_cert | default(true) %}
          {% if use_rsyslog_image|bool %}
                  tls.cacert=`echo $ES_CA`
                  tls.mycert=`echo $ES_CLIENT_CERT`
                  tls.myprivkey=`echo $ES_CLIENT_KEY`
          {% else %}
                  tls.cacert="{{ res.ca_cert|default('/etc/rsyslog.d/elasticsearch/es-ca.crt') }}"
                  tls.mycert="{{ res.cert|default('/etc/rsyslog.d/elasticsearch/es-cert.pem') }}"
                  tls.myprivkey="{{ res.key|default('/etc/rsyslog.d/elasticsearch/es-key.pem') }}"
          {% endif %}
          {% endif %}
          {% if use_rsyslog_image|bool %}
                  queue.filename="es-app"
                  queue.spoolDirectory=`echo $RSYSLOG_SPOOLDIRECTORY`
                  queue.type=`echo $ES_QUEUE_TYPE`
                  queue.maxDiskSpace=`echo $ES_QUEUE_MAXDISKSPACE`
                  queue.maxFileSize=`echo $ES_QUEUE_MAXFILESIZE`
                  queue.checkpointInterval=`echo $ES_QUEUE_CHECKPOINTINTERVAL`
                  queue.syncqueuefiles="on"
          {% else %}
                  queue.filename="{{ res.queue_filename|default('es-app') }}"
                  queue.spoolDirectory="{{ res.queue_spooldir|default(rsyslog_es_q_spooldirectory) }}"
                  queue.type="{{ res.queue_type|default(rsyslog_es_q_type) }}"
                  queue.maxDiskSpace="{{ res.queue_max_disk_space|default(rsyslog_es_q_maxdiskspace) }}"
                  queue.maxFileSize="{{ res.queue_max_file_size|default(rsyslog_es_q_maxfilesize) }}"
                  queue.checkpointInterval="{{ res.queue_checkpoint_interval|default(rsyslog_es_q_checkpointinterval) }}"
                  queue.syncqueuefiles="{{ res.queue_sync_files|default("on") }}"
          {% endif %}
              )
          {% else %}
          {% if loop.first %}
          {% if use_rsyslog_image|bool %}
              if ( $.logs_collection == "{{ res.logs_collections_name }}" ) and ($.index_prefix startswith "{{ res.index_prefix }}")
                 or ((`echo $ES_HOST` == `echo $OPS_HOST`) and (`echo $ES_PORT` == `echo $OPS_PORT`)) then {
          {% else %}
              if ( $.logs_collection == "{{ res.logs_collections_name }}" ) and ($.index_prefix startswith "{{ res.index_prefix }}") then {
          {% endif %}
                action(
                    type="omelasticsearch"
          {% if use_rsyslog_image|bool %}
                    name=`echo $ES_OUTPUT_NAME`
                    server=`echo $ES_HOST`
                    serverport=`echo $ES_PORT`
          {% else %}
                    name="{{ res.name | default('viaq-elasticsearch') }}"
                    server="{{ res.server_host | default('logging-es') }}"
                    serverport="{{ res.server_port | default(9200) | int }}"
          {% endif %}
                    template="{{ res.template | default("es_template") }}"
                    searchIndex="{{ res.searchIndex | default("index_template") }}"
                    dynSearchIndex="{{ res.dynSearchIndex | default("on") }}"
                    searchType="{{ res.searchType | default("com.redhat.viaq.common") }}"
                    bulkmode="{{ res.bulkmode | default("on") }}"
                    writeoperation="{{ res.writeoperation | default("create") }}"
                    bulkid="{{ res.bulkid | default("id_template") }}"
                    dynbulkid="{{ res.dynbulkid | default("on") }}"
                    retryfailures="{{ res.retryfailures | default("on") }}"
                    allowUnsignedCerts="{{ res.allowUnsignedCerts | default("off") }}"
                    retryruleset="{{ res.retryruleset | default("try_es") }}"
                    usehttps="{{ res.usehttps | default("on") }}"
          {% if use_omelasticsearch_cert | default(true) %}
          {% if use_rsyslog_image|bool %}
                    tls.cacert=`echo $ES_CA`
                    tls.mycert=`echo $ES_CLIENT_CERT`
                    tls.myprivkey=`echo $ES_CLIENT_KEY`
          {% else %}
                    tls.cacert="{{ res.ca_cert|default('/etc/rsyslog.d/elasticsearch/es-ca.crt') }}"
                    tls.mycert="{{ res.cert|default('/etc/rsyslog.d/elasticsearch/es-cert.pem') }}"
                    tls.myprivkey="{{ res.key|default('/etc/rsyslog.d/elasticsearch/es-key.pem') }}"
          {% endif %}
          {% endif %}
          {% if use_rsyslog_image|bool %}
                    queue.filename="es-app"
                    queue.spoolDirectory=`echo $RSYSLOG_SPOOLDIRECTORY`
                    queue.type=`echo $ES_QUEUE_TYPE`
                    queue.maxDiskSpace=`echo $ES_QUEUE_MAXDISKSPACE`
                    queue.maxFileSize=`echo $ES_QUEUE_MAXFILESIZE`
                    queue.checkpointInterval=`echo $ES_QUEUE_CHECKPOINTINTERVAL`
                    queue.syncqueuefiles="on"
          {% else %}
                    queue.filename="{{ res.queue_filename|default('es-app') }}"
                    queue.spoolDirectory="{{ res.queue_spooldir|default(rsyslog_es_q_spooldirectory) }}"
                    queue.type="{{ res.queue_type|default(rsyslog_es_q_type) }}"
                    queue.maxDiskSpace="{{ res.queue_max_disk_space|default(rsyslog_es_q_maxdiskspace) }}"
                    queue.maxFileSize="{{ res.queue_max_file_size|default(rsyslog_es_q_maxfilesize) }}"
                    queue.checkpointInterval="{{ res.queue_checkpoint_interval|default(rsyslog_es_q_checkpointinterval) }}"
                    queue.syncqueuefiles="{{ res.queue_sync_files|default("on") }}"
          {% endif %}
                )
          {% elif loop.last %}
              else {
                action(
                    type="omelasticsearch"
          {% if use_rsyslog_image|bool %}
                    name=`echo $ES_OPS_OUTPUT_NAME`
                    server=`echo $OPS_HOST`
                    serverport=`echo $OPS_PORT`
          {% else %}
                    name="{{ res.name | default('viaq-elasticsearch') }}"
                    server="{{ res.server_host | default('logging-es') }}"
                    serverport="{{ res.server_port | default(9200) | int }}"
          {% endif %}
                    template="{{ res.template | default("es_template") }}"
                    searchIndex="{{ res.searchIndex | default("index_template") }}"
                    dynSearchIndex="{{ res.dynSearchIndex | default("on") }}"
                    searchType="{{ res.searchType | default("com.redhat.viaq.common") }}"
                    bulkmode="{{ res.bulkmode | default("on") }}"
                    writeoperation="{{ res.writeoperation | default("create") }}"
                    bulkid="{{ res.bulkid | default("id_template") }}"
                    dynbulkid="{{ res.dynbulkid | default("on") }}"
                    retryfailures="{{ res.retryfailures | default("on") }}"
                    allowUnsignedCerts="{{ res.allowUnsignedCerts | default("off") }}"
          {% if res.retryfailures|default("on") == "on" %}
                    retryruleset="{{ res.retryruleset | default("try_es") }}"
          {% endif %}
                    usehttps="{{ res.usehttps | default("on") }}"
          {% if use_omelasticsearch_cert | default(true) %}
          {% if use_rsyslog_image|bool %}
                    tls.cacert=`echo $OPS_CA`
                    tls.mycert=`echo $OPS_CLIENT_CERT`
                    tls.myprivkey=`echo $OPS_CLIENT_KEY`
          {% else %}
                    tls.cacert="{{ res.ca_cert|default('/etc/rsyslog.d/elasticsearch/es-ca.crt') }}"
                    tls.mycert="{{ res.cert|default('/etc/rsyslog.d/elasticsearch/es-cert.pem') }}"
                    tls.myprivkey="{{ res.key|default('/etc/rsyslog.d/elasticsearch/es-key.pem') }}"
          {% endif %}
          {% endif %}
          {% if use_rsyslog_image|bool %}
                    queue.filename="es-app"
                    queue.spoolDirectory=`echo $RSYSLOG_SPOOLDIRECTORY`
                    queue.type=`echo $ES_QUEUE_TYPE`
                    queue.maxDiskSpace=`echo $ES_QUEUE_MAXDISKSPACE`
                    queue.maxFileSize=`echo $ES_QUEUE_MAXFILESIZE`
                    queue.checkpointInterval=`echo $ES_QUEUE_CHECKPOINTINTERVAL`
                    queue.syncqueuefiles="on"
          {% else %}
                    queue.filename="{{ res.queue_filename|default('es-app') }}"
                    queue.spoolDirectory="{{ res.queue_spooldir|default(rsyslog_es_q_spooldirectory) }}"
                    queue.type="{{ res.queue_type|default(rsyslog_es_q_type) }}"
                    queue.maxDiskSpace="{{ res.queue_max_disk_space|default(rsyslog_es_q_maxdiskspace) }}"
                    queue.maxFileSize="{{ res.queue_max_file_size|default(rsyslog_es_q_maxfilesize) }}"
                    queue.checkpointInterval="{{ res.queue_checkpoint_interval|default(rsyslog_es_q_checkpointinterval) }}"
                    queue.syncqueuefiles="{{ res.queue_sync_files|default("on") }}"
          {% endif %}
                )
          {% else %}
          {% if use_rsyslog_image|bool %}
              else if ( $.logs_collection == "{{ res.logs_collections_name }}" ) and ($.index_prefix startswith "{{ res.index_prefix }}")
                 or ((`echo $ES_HOST` == `echo $OPS_HOST`) and (`echo $ES_PORT` == `echo $OPS_PORT`)) then {
          {% else %}
              else if ( $.logs_collection == "{{ res.logs_collections_name }}" ) and ($.index_prefix startswith "{{ res.index_prefix }}") then {
          {% endif %}
                action(
                    type="omelasticsearch"
          {% if use_rsyslog_image|bool %}
                    name=`echo $ES_OUTPUT_NAME`
                    server=`echo $ES_HOST`
                    serverport=`echo $ES_PORT`
          {% else %}
                    name="{{ res.name | default('viaq-elasticsearch') }}"
                    server="{{ res.server_host | default('logging-es') }}"
                    serverport="{{ res.server_port | default(9200) | int }}"
          {% endif %}
                    template="{{ res.template | default("es_template") }}"
                    searchIndex="{{ res.searchIndex | default("index_template") }}"
                    dynSearchIndex="{{ res.dynSearchIndex | default("on") }}"
                    searchType="{{ res.searchType | default("com.redhat.viaq.common") }}"
                    bulkmode="{{ res.bulkmode | default("on") }}"
                    writeoperation="{{ res.writeoperation | default("create") }}"
                    bulkid="{{ res.bulkid | default("id_template") }}"
                    dynbulkid="{{ res.dynbulkid | default("on") }}"
                    retryfailures="{{ res.retryfailures | default("on") }}"
                    allowUnsignedCerts="{{ res.allowUnsignedCerts | default("off") }}"
          {% if res.retryfailures|default("on") == "on" %}
                    retryruleset="{{ res.retryruleset | default("try_es") }}"
          {% endif %}
                    usehttps="{{ res.usehttps | default("on") }}"
          {% if use_omelasticsearch_cert | default(true) %}
          {% if use_rsyslog_image|bool %}
                    tls.cacert=`echo $ES_CA`
                    tls.mycert=`echo $ES_CLIENT_CERT`
                    tls.myprivkey=`echo $ES_CLIENT_KEY`
          {% else %}
                    tls.cacert="{{ res.ca_cert|default('/etc/rsyslog.d/elasticsearch/es-ca.crt') }}"
                    tls.mycert="{{ res.cert|default('/etc/rsyslog.d/elasticsearch/es-cert.pem') }}"
                    tls.myprivkey="{{ res.key|default('/etc/rsyslog.d/elasticsearch/es-key.pem') }}"
          {% endif %}
          {% endif %}
          {% if use_rsyslog_image|bool %}
                    queue.filename="es-app"
                    queue.spoolDirectory=`echo $RSYSLOG_SPOOLDIRECTORY`
                    queue.type=`echo $ES_QUEUE_TYPE`
                    queue.maxDiskSpace=`echo $ES_QUEUE_MAXDISKSPACE`
                    queue.maxFileSize=`echo $ES_QUEUE_MAXFILESIZE`
                    queue.checkpointInterval=`echo $ES_QUEUE_CHECKPOINTINTERVAL`
                    queue.syncqueuefiles="on"
          {% else %}
                    queue.filename="{{ res.queue_filename|default('es-app') }}"
                    queue.spoolDirectory="{{ res.queue_spooldir|default(rsyslog_es_q_spooldirectory) }}"
                    queue.type="{{ res.queue_type|default(rsyslog_es_q_type) }}"
                    queue.maxDiskSpace="{{ res.queue_max_disk_space|default(rsyslog_es_q_maxdiskspace) }}"
                    queue.maxFileSize="{{ res.queue_max_file_size|default(rsyslog_es_q_maxfilesize) }}"
                    queue.checkpointInterval="{{ res.queue_checkpoint_interval|default(rsyslog_es_q_checkpointinterval) }}"
                    queue.syncqueuefiles="{{ res.queue_sync_files|default("on") }}"
          {% endif %}
                )
          {% endif %}
              }
          {% endif %}
          {% endfor %}
          }

rsyslog_conf_es_elasticsearch_call_ruleset:

  - name: '30-elasticsearch'
    type: 'format'
    path: '{{ rsyslog_file_config_dir }}'
    sections:

      - options: |-
          # call the elasticsearch output ruleset
          call try_es
