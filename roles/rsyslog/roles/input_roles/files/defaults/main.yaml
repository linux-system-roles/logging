---
# Imfile configuration setting
# ----------------------------

rsyslog_unprivileged: false

# rsyslog_capabilities is an array which takes 'network', 'remote-files', 'tls'
# 'network' enables input and output over network.
# 'remote-files' allows input from remote hosts are separately stored from the local logs.
# 'tls' specifies the input and output could be processed over tls.
#       Note: unles rsyslog_send_over_tls_only is set to true, insecure network connection
#       is also allowed.
rsyslog_capabilities: []
__rsyslog_files_input_packages: []

rsyslog_input_log_path: "/var/log/containers/*.log"
rsyslog_input_log_tag: "container"

# rsyslog_files_input_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This list specifies imfile ``rsyslogd`` example configuration.
__rsyslog_files_input_rules:
  - '{{ __rsyslog_conf_imfile_modules }}'
  - '{{ __rsyslog_conf_imfile_rulesets }}'
  - '{{ __rsyslog_conf_imfile_inputs }}'

# Debops example configuration options
# --------------------------------------------

# __rsyslog_conf_local_modules
#
# List of ``rsyslogd`` modules that enable logs from the local system to be
# received and parsed by the ``rsyslogd`` daemon.
__rsyslog_conf_imfile_modules:

  - name: 'imfile-modules'
    type: 'modules'
    sections:

      - comment: 'Reads log messages from file'
        options: |-
          module(load="imfile" mode="inotify")

# __rsyslog_conf_imfile_rulesets
#
__rsyslog_conf_imfile_rulesets:

  - name: 'imfile-rulesets'
    type: 'rules'
    sections:

      - comment: 'Rules for the messages from log files'
        options: |-
          ruleset(name="files") {
            $IncludeConfig {{rsyslog_config_dir}}/*.files
          }

# __rsyslog_conf_system_inputs
#
__rsyslog_conf_imfile_inputs:

  - name: 'imfile-input'
    type: 'input'
    sections:

      - comment: 'Log messages from log files'
        options: |-
          # FIXME: Need to normalize a log before passing it to elasticsearch output
          {% if rsyslog_elasticsearch is defined and rsyslog_elasticsearch | length > 0 %}

          {% for element in rsyslog_logs_collections %}
          {% if element.name is defined and element.type == "files" %}
          {% if element.rsyslog_input_log_path is defined %}
          {% if element.rsyslog_input_log_tag is defined %}
          input(type="imfile" file="{{ element.rsyslog_input_log_path }}" tag="{{ element.rsyslog_input_log_tag }}" ruleset="try_es")
          {% else %}
          input(type="imfile" file="{{ element.rsyslog_input_log_path }}" tag="{{ rsyslog_input_log_tag }}" ruleset="try_es")
          {% endif %}
          {% else %}
          {% if element.rsyslog_input_log_tag is defined %}
          input(type="imfile" file="{{ rsyslog_input_log_path }}" tag="{{ element.rsyslog_input_log_tag }}" ruleset="try_es")
          {% else %}
          input(type="imfile" file="{{ rsyslog_input_log_path }}" tag="{{ rsyslog_input_log_tag }}" ruleset="try_es")
          {% endif %}
          {% endif %}
          {% endif %}
          {% endfor %}

          {% else %}

          {% for element in rsyslog_logs_collections %}
          {% if element.name is defined and element.type == "files" %}
          {% if element.rsyslog_input_log_path is defined %}
          {% if element.rsyslog_input_log_tag is defined %}
          input(type="imfile" file="{{ element.rsyslog_input_log_path }}" tag="{{ element.rsyslog_input_log_tag }}")
          {% else %}
          input(type="imfile" file="{{ element.rsyslog_input_log_path }}" tag="{{ rsyslog_input_log_tag }}")
          {% endif %}
          {% else %}
          {% if element.rsyslog_input_log_tag is defined %}
          input(type="imfile" file="{{ rsyslog_input_log_path }}" tag="{{ element.rsyslog_input_log_tag }}")
          {% else %}
          input(type="imfile" file="{{ rsyslog_input_log_path }}" tag="{{ rsyslog_input_log_tag }}")
          {% endif %}
          {% endif %}
          {% endif %}
          {% endfor %}

          {% endif %}
