---
# Viaq configuration
# ---------------------

# .. envvar:: rsyslog_viaq_log_dir
#
# Viaq log directory
rsyslog_viaq_log_dir: '{{rsyslog_system_log_dir}}/containers'

# Viaq rpm packages
# adding rsyslog_logging_packages
# ------------------

# .. envvar:: rsyslog_viaq_k8s_packages
#
# List of rpm packages for Common Logging.
rsyslog_viaq_k8s_packages: ['rsyslog-mmjsonparse', 'rsyslog-mmkubernetes']

# Available configuration set
# ----------------------------

# Viaq Rsyslog configuration rules
# ---------------------------

rsyslog_viaq_k8s_rules:

  - '{{ rsyslog_conf_viaq_mmk8s_module }}'
  - '{{ rsyslog_conf_viaq_mmk8s_input }}'
  - '{{ rsyslog_rulebase_viaq_k8s_filename }}'
  - '{{ rsyslog_rulebase_viaq_k8s_container_name }}'
  - '{{ rsyslog_rulebase_viaq_crio }}'
  - '{{ rsyslog_rulebase_viaq_k8s_multiline }}'

# Default Viaq-k8s configuration options
# ---------------------------------

logging_mmk8s_ca_cert: ''
logging_mmk8s_token: ''

rsyslog_conf_viaq_mmk8s_module:

  - name: 'mmk8s'
    type: 'modules'
    path: '{{rsyslog_file_config_dir}}'
    sections:

      - options: |-
          # mmkubernetes
          module(load="mmkubernetes")

          # Parse logs to JSON
          module(load="mmjsonparse")

rsyslog_conf_viaq_mmk8s_input:

  - name: '10-mmk8s'
    type: 'format'
    path: '{{rsyslog_file_config_dir}}'
    sections:

      - options: |-
          {% if use_rsyslog_image|bool %}
          # NOTE: endmsg.regex is available in 3.38.0 and newer
          # for crio, the end of message is when the value "F" is in the logtag field
          # for docker json-file, it is when the "log" field value ends with "\n"
          # however, since imfile processing happens _before_ the field parsing, we have to
          # rely on two regular expressions - basically look for the pattern \n"}$ for the
          # string at the end of the message, or \n"," for the string in the middle of
          # a message
          input(type="imfile"
                file="{{ rsyslog_viaq_log_dir }}/*.log"
                tag="kubernetes" addmetadata="on" reopenOnTruncate="on"
                discardTruncatedMsg="on" msgDiscardingError="off"
                endmsg.regex="(^[^ ]+ (stdout|stderr) F )|(\\n\"}$)|(\\n\",\")") # "
          {% else %}
          input(type="imfile" file="{{ rsyslog_viaq_log_dir }}/*.log" tag="kubernetes" addmetadata="on" reopenOnTruncate="on")
          {% endif %}

          if ((strlen($!CONTAINER_NAME) > 0) and (strlen($!CONTAINER_ID_FULL) > 0)) or
              ((strlen($!metadata) > 0) and (strlen($!metadata!filename) > 0) and ($!metadata!filename startswith "{{rsyslog_viaq_log_dir}}/")) then {
              if ((strlen($!metadata) > 0) and (strlen($!metadata!filename) > 0) and ($!metadata!filename startswith "{{rsyslog_viaq_log_dir}}/")) then {
                  if $msg startswith "{" then {
                      action(type="mmnormalize" rulebase="{{ rsyslog_config_dir }}/multiline-json.rulebase")
                      foreach ($.ii in $!multilinejson) do {
                          if strlen($!@timestamp) == 0 then {
                              set $!@timestamp = $.ii!time;
                          }
                          if strlen($!stream) == 0 then {
                              set $!stream = $.ii!stream;
                          }
                          if strlen($!log) == 0 then {
                              set $!log = $.ii!log;
                          } else {
                              reset $!log = $!log & $.ii!log;
                          }
                      }
                      unset $!multilinejson;
                  } else {
                      action(type="mmnormalize" rulebase="{{ rsyslog_config_dir }}/crio.rulebase")
                      foreach ($.ii in $!multilinecrio) do {
                          if strlen($!@timestamp) == 0 then {
                              set $!@timestamp = $.ii!time;
                          }
                          if strlen($!stream) == 0 then {
                              set $!stream = $.ii!stream;
                          }
                          if strlen($!log) == 0 then {
                              set $!log = $.ii!log;
                          } else {
                              reset $!log = $!log & $.ii!log;
                          }
                      }
                      unset $!multilinecrio;
                  }
              }
              action(type="mmkubernetes"
                 filenamerulebase="{{ rsyslog_config_dir }}/k8s_filename.rulebase"
                 containerrulebase="{{ rsyslog_config_dir }}/k8s_container_name.rulebase"
                 tls.cacert="{{logging_mmk8s_ca_cert}}"
                 tokenfile="{{logging_mmk8s_token}}" annotation_match=["."])
          }

rsyslog_rulebase_viaq_k8s_filename:

  - name: 'k8s_filename'
    filename: 'k8s_filename.rulebase'
    nocomment: 'true'
    path: '{{rsyslog_file_config_dir}}'
    sections:

      - options: |-
          version=2
          rule=:{{ rsyslog_viaq_log_dir }}/%pod_name:char-to:_%_%namespace_name:char-to:_%_%container_name_and_id:char-to:.%.log

rsyslog_rulebase_viaq_k8s_container_name:

  - name: 'k8s_container_name'
    filename: 'k8s_container_name.rulebase'
    nocomment: 'true'
    path: '{{rsyslog_file_config_dir}}'
    sections:

      - options: |-
          version=2
          rule=:%k8s_prefix:char-to:_%_%container_name:char-to:_%_%pod_name:char-to:_%_%namespace_name:char-to:_%_%not_used_1:char-to:_%_%not_used_2:rest%
          # not a kubernetes container
          rule=:%container_name:rest%

rsyslog_rulebase_viaq_crio:

  - name: 'crio'
    filename: 'crio.rulebase'
    nocomment: 'true'
    path: '{{rsyslog_file_config_dir}}'
    sections:
      - options: |-
          version=2
          rule=:%{"name":"multilinecrio", "type":"repeat",
                      "parser":[
                                 {"type":"word", "name":"time"},
                                 {"type":"literal", "text":" "},
                                 {"type":"word", "name":"stream"},
                                 {"type":"literal", "text":" "},
                                 {"type":"word", "name":"partial"},
                                 {"type":"literal", "text":" "},
                                 {"type":"char-sep", "name":"log", "extradata":"\n"}
                               ],
                      "while":[
                                 {"type":"literal", "text":"\n"},
                              ]
                   }%

rsyslog_rulebase_viaq_k8s_multiline:

  - name: 'multiline'
    filename: 'multiline-json.rulebase'
    nocomment: 'true'
    path: '{{rsyslog_file_config_dir}}'
    sections:
      - options: |-
          version=2
          rule=:%{"name":"multilinejson", "type":"repeat", "option.permitMismatchInParser": true,
                      "parser":[
                                 {"type":"json", "name":"."}
                               ],
                      "while":[
                                 {"type":"char-sep", "extradata":"{"}
                              ]
                   }%
