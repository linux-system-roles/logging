---
# Debops logs configuration set
# ----------------------------
rsyslog_pki: 'True'

rsyslog_unprivileged: 'False'

rsyslog_capabilities: [ 'network', 'remote-files', 'tls' ]

# .. envvar:: rsyslog_debops_rules
#
# List of YAML dictionaries, each dictionary should contain ``rsyslogd``
# configuration in a special format. See :ref:`rsyslog_rules` for more
# details. This list specifies debops ``rsyslogd`` example configuration.
rsyslog_debops_rules:
  - '{{ rsyslog_conf_local_debops_modules }}'
  - '{{ rsyslog_conf_filename_templates }}'
  - '{{ rsyslog_conf_remote_forward }}'
  - '{{ rsyslog_conf_default_rulesets }}'
  - '{{ rsyslog_conf_system_rules }}'
  - '{{ rsyslog_conf_system_cron }}'
  - '{{ rsyslog_conf_network_input }}'
  - '{{ rsyslog_conf_dynamic_logs }}'
  - '{{ rsyslog_conf_stop_remote }}'

# Debops example configuration options
# --------------------------------------------

# .. envvar:: rsyslog_conf_local_modules
#
# List of ``rsyslogd`` modules that enable logs from the local system to be
# received and parsed by the ``rsyslogd`` daemon.
rsyslog_conf_local_debops_modules:

  - name: 'local-debops-modules'
    type: 'modules'
    sections:

      - comment: 'Log messages sent to local UNIX socket'
        options: |-
          module(load="imuxsock" SysSock.use="on")

# .. envvar:: rsyslog_conf_filename_templates
#
# List of ``rsyslogd`` templates which are used to generate dynamic filenames
# for remote logs, based on hostnames. You can add additional template
# configuration by writing it in the :file:`{{rsyslog_config_dir}}/*.template` files, they
# will be included by the main configuration.
rsyslog_conf_filename_templates:

  - name: 'templates'
    type: 'template'
    sections:

      - comment: 'Remote host system logs'
        options: |-
          template(
            name="RemoteHostSyslog"
            type="string"
            string="{{rsyslog_system_log_dir}}/remote/hosts/%HOSTNAME%/syslog"
          )

      - comment: 'Remote host auth logs'
        options: |-
          template(
            name="RemoteHostAuthLog"
            type="string"
            string="{{rsyslog_system_log_dir}}/remote/hosts/%HOSTNAME%/auth.log"
          )

      - comment: 'Remote host cron logs'
        options: |-
          template(
            name="RemoteHostCronLog"
            type="string"
            string="{{rsyslog_system_log_dir}}/remote/hosts/%HOSTNAME%/cron.log"
          )

      - comment: 'Remote service auth logs'
        options: |-
          template(
            name="RemoteServiceAuthLog"
            type="string"
            string="{{rsyslog_system_log_dir}}/remote/services/auth/auth.log"
          )

      - comment: 'Remote service cron logs'
        options: |-
          template(
            name="RemoteServiceCronLog"
            type="string"
            string="{{rsyslog_system_log_dir}}/remote/services/cron/cron.log"
          )

      - comment: 'Remote service mail logs'
        options: |-
          template(
            name="RemoteServiceMailLog"
            type="string"
            string="{{rsyslog_system_log_dir}}/remote/services/mail/mail.log"
          )

      - comment: 'Include custom templates'
        options: |-
          $IncludeConfig {{rsyslog_config_dir}}/*.template

      - comment: 'Use traditional timestamp format'
        options: |-
          $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# .. envvar:: rsyslog_conf_remote_forward
#
# Enable log forwarding to another ``rsyslogd`` instance if it's enabled in
# :envvar:`rsyslog_forward` variables.
rsyslog_conf_remote_forward:

  - filename: '20-remote-forward.system'
    state: '{{ "present"
               if (rsyslog_forward|d() or rsyslog_group_forward|d() or rsyslog_host_forward|d())
               else "absent" }}'

    sections:

      - comment: 'Forward logs over TLS by default'
        options: '{{ rsyslog_send_over_tls }}'

      - comment: 'Forward logs to specified hosts'
        options: |-
          {% for element in (rsyslog_forward + rsyslog_group_forward + rsyslog_host_forward) %}
          {{ element }}
          {% endfor %}

# .. envvar:: rsyslog_conf_default_rulesets [[[
#
# The ``rsyslogd`` configuration can contain multiple rulesets, each one
# connected to an input channel (see
# http://www.rsyslog.com/doc/v8-stable/concepts/multi_ruleset.html for more
# details).
#
# By default ``rsyslog`` use the default ruleset for local system logs,
# and defines a separate ``remote`` ruleset for logs incoming over the
# network from remote hosts. The local log rules are stored in
# :file:`{{rsyslog_config_dir}}/*.system` configuration files, and remote log
# rules are stored in :file:`{{rsyslog_config_dir}}/*.remote` configuration files.
rsyslog_conf_default_rulesets:

  - name: 'default-rulesets'
    type: 'rules'
    sections:

      - comment: 'Rules for the local system logs'
        options: |-
          $IncludeConfig {{rsyslog_config_dir}}/*.system

      - comment: 'Rules for logs incoming from remote hosts'
        options: |-
          ruleset(name="remote") {
            $IncludeConfig {{rsyslog_config_dir}}/*.remote
          }

# .. envvar:: rsyslog_conf_system_rules
#
# A set of default ``rsyslog`` options which store local system logs in files
# located in :file:`{{rsyslog_system_log_dir}}/` directory. This is mostly the same as the default
# ``rsyslogd`` configuration provided in Debian/Ubuntu installations.
rsyslog_conf_system_rules:

  - filename: '50-default-rules.system'
    sections:

      - comment: |-
          Log all kernel messages to the console.
          Logging much else clutters up the screen.
        options: |-
          #kern.*                                                 /dev/console

      - comment: |-
          Log anything (except mail) of level info or higher.
          Don't log private authentication messages!
        options: |-
          *.info;mail.none;authpriv.none;cron.none                {{rsyslog_system_log_dir}}/messages

      - comment: 'The authpriv file has restricted access.'
        options: |-
          authpriv.*                                              {{rsyslog_system_log_dir}}/secure

      - comment: 'Log all the mail messages in one place.'
        options: |-
          mail.*                                                  -{{rsyslog_system_log_dir}}/maillog

      - comment: 'Log cron stuff'
        options: |-
          cron.*                                                  -{{rsyslog_system_log_dir}}/cron

      - comment: 'Everybody gets emergency messages'
        options: |-
          *.emerg                                                  :omusrmsg:*

      - comment: 'Save news errors of level crit and higher in a special file.'
        options: |-
          uucp,news.crit                                          {{rsyslog_system_log_dir}}/spooler

      - comment: 'Save boot messages also to boot.log'
        options: |-
          local7.*                                                {{rsyslog_system_log_dir}}/boot.log

# .. envvar:: rsyslog_conf_system_cron
#
# Configuration for system :program:`cron` logs. This will ensure that :program:`cron` logs
# will be stored in separate :file:`{{rsyslog_system_log_dir}}/cron.log` file and won't clutter auth
# or syslog logs.
rsyslog_conf_system_cron:
  filename: '40-cron.system'
  options: |
    if ($msg contains "pam_unix(cron:session): session opened for user") then {
      action(type="omfile" file="{{rsyslog_system_log_dir}}/cron.log")
    {% if 'remote-files' in rsyslog_capabilities %}
      action(type="omfile" DynaFile="RemoteHostCronLog")
      action(type="omfile" DynaFile="RemoteServiceCronLog")
    {% endif %}
      stop
    } else if ($msg contains "pam_unix(cron:session): session closed for user") then {
      action(type="omfile" file="{{rsyslog_system_log_dir}}/cron.log")
    {% if 'remote-files' in rsyslog_capabilities %}
      action(type="omfile" DynaFile="RemoteHostCronLog")
      action(type="omfile" DynaFile="RemoteServiceCronLog")
    {% endif %}
      stop
    }

# .. envvar:: rsyslog_conf_network_input [[[
#
# Configuration of UDP, TCP and TCP over TLS inputs to receive logs from remote
# hosts, enabled by the ``network`` capability.
rsyslog_conf_network_input:

  - name: 'network-input'
    type: 'input'
    state: '{{ "present"
              if ("network" in rsyslog_capabilities)
              else "absent" }}'
    sections:

      - comment: 'Log messages from remote hosts over UDP'
        options: |-
          input(
            type="imudp"
            port="{{ rsyslog_udp_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if (not rsyslog_send_over_tls_only)
                  else "absent" }}'

      - comment: 'Log messages from remote hosts over TCP'
        options: |-
          input(
            type="imptcp"
            port="{{ rsyslog_tcp_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if (not rsyslog_send_over_tls_only)
                  else "absent" }}'

      - comment: 'Log messages from remote hosts over TLS'
        options: |-
          input(
            type="imtcp"
            name="imtls"
            port="{{ rsyslog_tcp_tls_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if ("tls" in rsyslog_capabilities)
                  else "absent" }}'

# .. envvar:: rsyslog_conf_dynamic_logs
#
# List of ``rsyslogd`` rules which maintain dynamic log files in
# :file:`{{rsyslog_system_log_dir}}/remote/` directory. These log files will store
# logs incoming from other, remote hosts.
rsyslog_conf_dynamic_logs:

  - filename: '40-dynamic-cron.remote'
    options: |
      if ($msg contains "pam_unix(cron:session): session opened for user") then {
        action(type="omfile" DynaFile="RemoteHostCronLog")
        action(type="omfile" DynaFile="RemoteServiceCronLog")
        stop
      } else if ($msg contains "pam_unix(cron:session): session closed for user") then {
        action(type="omfile" DynaFile="RemoteHostCronLog")
        action(type="omfile" DynaFile="RemoteServiceCronLog")
        stop
      }
    state: '{{ "present"
               if ("remote-files" in rsyslog_capabilities)
               else "absent" }}'

  - filename: '50-dynamic-logs.remote'
    comment: 'Store remote logs in separate logfiles'
    options: |-
      authpriv.*                          ?RemoteHostAuthLog
      authpriv.*                          ?RemoteServiceAuthLog
      *.*;cron,authpriv.none              -?RemoteHostSyslog
      cron.*                              -?RemoteHostCronLog
      cron.*                              -?RemoteServiceCronLog
      mail.*                              -?RemoteServiceMailLog
    state: '{{ "present"
               if ("remote-files" in rsyslog_capabilities)
               else "absent" }}'

# .. envvar:: rsyslog_conf_stop_remote
#
# The older ``rsyslogd`` versions do not support empty rulesets. This
# configuration file is used to allow empty ``remote`` ruleset when remote log
# support is disabled, and should be included in the configuration at the very
# end.
rsyslog_conf_stop_remote:

  - filename: 'zz-stop.remote'
    comment: |-
      This is a workaround to support empty "remote" ruleset on
      older versions of rsyslog package.
      http://comments.gmane.org/gmane.comp.sysutils.rsyslog/15616
    options: |-
      stop
